{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# install.packages(\"repr\")\n",
    "\n",
    "library(repr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Installing package into ‘/home/jiae/R/x86_64-pc-linux-gnu-library/4.0’\n",
      "(as ‘lib’ is unspecified)\n",
      "\n",
      "Warning message:\n",
      "“unable to access index for repository https://cran.r-project.org/src/contrib:\n",
      "  cannot open URL 'https://cran.r-project.org/src/contrib/PACKAGES'”\n",
      "Warning message:\n",
      "“package ‘ggplot2’ is not available (for R version 4.0.2)”\n"
     ]
    }
   ],
   "source": [
    "# install.packages(\"ggplot2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(ggplot2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘dplyr’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# install.packages(\"dplyr\")\n",
    "library(dplyr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘dplyr’\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:reshape’:\n",
      "\n",
      "    rename\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:stats’:\n",
      "\n",
      "    filter, lag\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    intersect, setdiff, setequal, union\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "library(dplyr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Installing package into ‘/home/wonseok/R/x86_64-redhat-linux-gnu-library/3.6’\n",
      "(as ‘lib’ is unspecified)\n",
      "\n",
      "\n",
      "Attaching package: ‘reshape’\n",
      "\n",
      "\n",
      "The following object is masked from ‘package:dplyr’:\n",
      "\n",
      "    rename\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "install.packages(\"reshape\")\n",
    "library(reshape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(reshape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Installing package into ‘/home/jiae/R/x86_64-pc-linux-gnu-library/4.0’\n",
      "(as ‘lib’ is unspecified)\n",
      "\n",
      "Warning message:\n",
      "“unable to access index for repository https://cran.r-project.org/src/contrib:\n",
      "  cannot open URL 'https://cran.r-project.org/src/contrib/PACKAGES'”\n",
      "Warning message:\n",
      "“package ‘survival’ is not available (for R version 4.0.2)”\n"
     ]
    }
   ],
   "source": [
    "install.packages('survival')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "library(survival)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Installing package into ‘/home/jiae/R/x86_64-pc-linux-gnu-library/4.0’\n",
      "(as ‘lib’ is unspecified)\n",
      "\n",
      "Warning message:\n",
      "“unable to access index for repository https://cran.r-project.org/src/contrib:\n",
      "  cannot open URL 'https://cran.r-project.org/src/contrib/PACKAGES'”\n",
      "Warning message:\n",
      "“package ‘zoo’ is not available (for R version 4.0.2)”\n"
     ]
    }
   ],
   "source": [
    "install.packages('zoo')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "Attaching package: ‘zoo’\n",
      "\n",
      "\n",
      "The following objects are masked from ‘package:base’:\n",
      "\n",
      "    as.Date, as.Date.numeric\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "library(zoo)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "'/home/wonseok/work/wim'"
      ],
      "text/latex": [
       "'/home/wonseok/work/wim'"
      ],
      "text/markdown": [
       "'/home/wonseok/work/wim'"
      ],
      "text/plain": [
       "[1] \"/home/wonseok/work/wim\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "getwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "ename": "ERROR",
     "evalue": "Error in filter(total, hospitalid == 420 | hospitalid == 443 | hospitalid == : 객체 'hospitalid'를 찾을 수 없습니다\n",
     "output_type": "error",
     "traceback": [
      "Error in filter(total, hospitalid == 420 | hospitalid == 443 | hospitalid == : 객체 'hospitalid'를 찾을 수 없습니다\nTraceback:\n",
      "1. filter(total, hospitalid == 420 | hospitalid == 443 | hospitalid == \n .     199 | hospitalid == 449 | hospitalid == 416 | hospitalid == \n .     394 | hospitalid == 79 | hospitalid == 183 | hospitalid == \n .     181 | hospitalid == 184)"
     ]
    }
   ],
   "source": [
    "total <- read.csv(\"total_logistic.csv\", header = TRUE, sep = \",\")\n",
    "central <- filter(total, hospitalid==420 | hospitalid==443 | hospitalid==199 | hospitalid==449 | hospitalid==416 \n",
    "                 | hospitalid==394 | hospitalid==79 | hospitalid==183 | hospitalid==181 | hospitalid==184)\n",
    "\n",
    "central <- rename(central,\n",
    "                  c(actualiculos=\"time\",\n",
    "                    mortality2=\"Y\",\n",
    "                    age=\"x1\",\n",
    "                    GCS2=\"x2\",\n",
    "                    temperature2=\"x3\",\n",
    "                    ph2=\"x4\",\n",
    "                    pco22=\"x5\",\n",
    "                    bun2=\"x6\",\n",
    "                    bilirubin2=\"x7\",\n",
    "                    fio22=\"x8\"\n",
    "                  ))\n",
    "\n",
    "\n",
    "central <- select(central, hospitalid, time, Y, x1, x2, x3, x4, x5, x6, x7, x8)\n",
    "central <- na.omit(central) # Na 지워줌.\n",
    "table(distinct(central, hospitalid, .keep_all=TRUE)$hospitalid)\n",
    "#ls.str(central)\n",
    "\n",
    "central <- filter(central, time<=50)\n",
    "#----------- 기관 데이터 분할\n",
    "H1 <- filter(central, hospitalid==420)\n",
    "H2 <- filter(central, hospitalid==443)\n",
    "H3 <- filter(central, hospitalid==199)\n",
    "H4 <- filter(central, hospitalid==449)\n",
    "H5 <- filter(central, hospitalid==416)\n",
    "H6 <- filter(central, hospitalid==394)\n",
    "H7 <- filter(central, hospitalid==79 )\n",
    "H8 <- filter(central, hospitalid==183)\n",
    "H9 <- filter(central, hospitalid==181)\n",
    "H10 <- filter(central, hospitalid==184)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 파라미터 세팅"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#=============================================================\n",
    "# parameter setting\n",
    "#=============================================================\n",
    "party <- 10\n",
    "n_H <- 10\n",
    "# assign과 get 함수\n",
    "# assign은 변수를 생성하는 함수이다. \n",
    "# assign('x',10) 이렇게 하면 x에 10이 assign 된다.\n",
    "# \n",
    "\n",
    "for(i in 1:party){\n",
    "  assign(paste0('H',i,'_Y0'), filter(get(paste0('H',i)), Y==0))\n",
    "  assign(paste0('H',i,'_Y1'), filter(get(paste0('H',i)), Y==1))\n",
    "  \n",
    "  assign(paste0('H',i,'_n'), nrow(get(paste0('H',i))))\n",
    "  assign(paste0('H',i,'_n1'), ceiling(((nrow(get(paste0('H',i))))*2)/3))\n",
    "  \n",
    "  assign(paste0('H',i,'_Y0_n'), nrow(get(paste0('H',i,'_Y0'))))\n",
    "  assign(paste0('H',i,'_Y0_n1'), ceiling(((nrow(get(paste0('H',i,'_Y0'))))*2)/3))\n",
    "  \n",
    "  assign(paste0('H',i,'_Y1_n'), nrow(get(paste0('H',i,'_Y1'))))\n",
    "  assign(paste0('H',i,'_Y1_n1'), ceiling(((nrow(get(paste0('H',i,'_Y1'))))*2)/3))\n",
    "}\n",
    "\n",
    "R <- 200\n",
    "x <- 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#=================================================================================================\n",
    "# generating Z(1) and Z(2) \n",
    "#=================================================================================================\n",
    "\n",
    "set.seed(1)\n",
    "for(H in 1:party){\n",
    "  for(i in 1:R){\n",
    "    #--Y=0\n",
    "    idx <- sample(1:nrow(get(paste0('H',H,'_Y0'))), nrow(get(paste0('H',H,'_Y0'))), replace = FALSE)\n",
    "    assign(paste0('H',H,'_Y0_2'), get(paste0('H',H,'_Y0'))[idx,]) \n",
    "    assign(paste0('R1_H',H,'_Y0_',i), get(paste0('H',H,'_Y0_2'))[1:get(paste0('H',H,'_Y0_n1')), ])  # 모델 ?????? Z(1)\n",
    "    assign(paste0('R2_H',H,'_Y0_',i), get(paste0('H',H,'_Y0_2'))[(get(paste0('H',H,'_Y0_n1'))+1):nrow(get(paste0('H',H,'_Y0'))), ])  # 모델 검??? Z(2)\n",
    "    #  remove(get(paste0('H',H,'_Y0_2')))\n",
    "    \n",
    "    #--Y=1\n",
    "    idx <- sample(1:nrow(get(paste0('H',H,'_Y1'))), nrow(get(paste0('H',H,'_Y1'))), replace = FALSE)\n",
    "    assign(paste0('H',H,'_Y1_2'), get(paste0('H',H,'_Y1'))[idx,]) \n",
    "    assign(paste0('R1_H',H,'_Y1_',i), get(paste0('H',H,'_Y1_2'))[1:get(paste0('H',H,'_Y1_n1')), ])  # 모델 ?????? Z(1)\n",
    "    assign(paste0('R2_H',H,'_Y1_',i), get(paste0('H',H,'_Y1_2'))[(get(paste0('H',H,'_Y1_n1'))+1):nrow(get(paste0('H',H,'_Y1'))), ])  # 모델 검??? Z(2)\n",
    "    #  remove(get(paste0('H',H,'_Y1_2')))\n",
    "    \n",
    "    #-- Y=0 + Y=1\n",
    "    assign(paste0('R1_H',H,'_',i), rbind(get(paste0('R1_H',H,'_Y0_',i)), get(paste0('R1_H',H,'_Y1_',i)) ) ) # Z(1)\n",
    "    assign(paste0('R2_H',H,'_',i), rbind(get(paste0('R2_H',H,'_Y0_',i)), get(paste0('R2_H',H,'_Y1_',i)) ) ) # Z(2)\n",
    "  }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#=================================================================================================\n",
    "# Hospital 1, 2, 3 Model from Z(1)'s\n",
    "#=================================================================================================\n",
    "#===============Coefficient's\n",
    "for(H in 1:party){\n",
    "  for(i in 1:R){\n",
    "    assign( paste0('total_model',H), matrix(nrow=R, ncol=(x*2)) )\n",
    "    assign(paste0('cox_H',H, \"_\", i), coxph(Surv(time, Y)~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                                            data=get(paste0('R1_H',H, \"_\",i)), ties=\"breslow\"))\n",
    "    #    assign(paste0('base_cox_H',H,'_',i), basehaz(coxph(Surv(time, Y)~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11, \n",
    "    #                                                       data=get(paste0('R1_H',H, \"_\",i)), ties=\"breslow\"), centered=FALSE))\n",
    "  }\n",
    "  \n",
    "  # char형태로 바꾸어줌.\n",
    "  assign.by.char <- function(x,  ...) {\n",
    "    eval.parent(assign(x,  do.call(`[<-`, list(get(x) , ...)))) }\n",
    "  #-------\n",
    "  for(i in 1:R){\n",
    "    for(j in 1:x){\n",
    "      a <- assign.by.char(paste0('total_model',H),i,j,get(paste0('cox_H',H,'_',i))$coefficients[j] )\n",
    "      assign(paste0('total_model',H), a)\n",
    "\n",
    "      a <- assign.by.char(paste0('total_model',H),i,(j+8), summary(get(paste0('cox_H',H,'_',i)))$coefficients[j,3] )\n",
    "      assign(paste0('total_model',H), a)\n",
    "            #  get(paste0('total_model',H))[i,1:x] <- get(paste0('cox_H',H,'_',i))$coefficients[1:x]   \n",
    "    }\n",
    "  }\n",
    "  assign(paste0('total_model', H), rename(data.frame(get(paste0('total_model',H))),\n",
    "                                          c(X1=\"x1\",\n",
    "                                            X2=\"x2\",\n",
    "                                            X3=\"x3\",\n",
    "                                            X4=\"x4\",\n",
    "                                            X5=\"x5\",\n",
    "                                            X6=\"x6\",\n",
    "                                            X7=\"x7\",\n",
    "                                            X8=\"x8\",\n",
    "                                            X9=\"x1_se\",\n",
    "                                            X10=\"x2_se\",\n",
    "                                            X11=\"x3_se\",\n",
    "                                            X12=\"x4_se\",\n",
    "                                            X13=\"x5_se\",\n",
    "                                            X14=\"x6_se\",\n",
    "                                            X15=\"x7_se\",\n",
    "                                            X16=\"x8_se\"\n",
    "                                          ) ) )\n",
    "}  \n",
    "\n",
    "for(H in 1:party){\n",
    "  event <- select(filter(get(paste0(\"H\",H)), Y==1), time)\n",
    "  grouped <- group_by(event, time)\n",
    "  assign(paste0(\"H\",H,\"_time\"), summarise(grouped, n_event=n()  ) )\n",
    "}\n",
    "#View(H1_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#=================================================================================================\n",
    "# Hospital  Z(2) ??? 3 모델 fitting\n",
    "#=================================================================================================\n",
    "\n",
    "for(H in 1:party){\n",
    "  \n",
    "  #------------ H1-Z(2) ??? ?????? Hospital 1,2,3 모델??? survival prob\n",
    "  for(i in 1:R){\n",
    "    assign(paste0('likeli_H',H,'_',i) , matrix(nrow=nrow(get(paste0('R2_H',H,'_',i))), ncol=(n_H*2+2) )) \n",
    "    matrix_name <- paste0('likeli_H',H,'_', i) \n",
    "    for(n in 1:nrow(get(paste0('likeli_H',H,'_',i)))){\n",
    "      for( model in 1:party){\n",
    "        \n",
    "        #-- Likelihood\n",
    "        exp_lp <- exp( get(paste0('R2_H',H,'_',i))$x1[n]*get(paste0('total_model',model))$x1[i] + \n",
    "                         get(paste0('R2_H',H,'_',i))$x2[n]*get(paste0('total_model',model))$x2[i] +\n",
    "                         get(paste0('R2_H',H,'_',i))$x3[n]*get(paste0('total_model',model))$x3[i] +\n",
    "                         get(paste0('R2_H',H,'_',i))$x4[n]*get(paste0('total_model',model))$x4[i] +\n",
    "                         get(paste0('R2_H',H,'_',i))$x5[n]*get(paste0('total_model',model))$x5[i] +\n",
    "                         get(paste0('R2_H',H,'_',i))$x6[n]*get(paste0('total_model',model))$x6[i] +\n",
    "                         get(paste0('R2_H',H,'_',i))$x7[n]*get(paste0('total_model',model))$x7[i] +\n",
    "                         get(paste0('R2_H',H,'_',i))$x8[n]*get(paste0('total_model',model))$x8[i]  )\n",
    "        \n",
    "        a <- assign.by.char(matrix_name, n, model, as.numeric(exp_lp) )\n",
    "        assign(matrix_name, a) \n",
    "        \n",
    "        b <- assign.by.char(matrix_name, n, model+n_H, as.numeric(log(exp_lp) ))\n",
    "        assign(matrix_name, b) \n",
    "        #      H_t <- get(paste0('total_model',model))[i,(x+t)]*exp_lp\n",
    "        #      a <- assign.by.char(matrix_name, n, (t+S*(model-1)), exp(-H_t) )\n",
    "        #      assign(matrix_name, a) \n",
    "        \n",
    "        \n",
    "        #--- time, event \n",
    "        a1 <- assign.by.char(matrix_name, n, n_H*2+1, get(paste0('R2_H',H,'_',i))$Y[n]) #- Event\n",
    "        assign(matrix_name, a1)\n",
    "        a2 <- assign.by.char(matrix_name, n, n_H*2+2, get(paste0('R2_H',H,'_',i))$time[n]) #- time\n",
    "        assign(matrix_name, a2)\n",
    "        #      assign(matrix_name, a3)\n",
    "        #      a4 <- assign.by.char(matrix_name, n, n_H+4, paste0('H',H)) #- time2\n",
    "        #      assign(matrix_name, a4)\n",
    "        \n",
    "      }\n",
    "    }\n",
    "\n",
    "    assign(paste0('likeli_H',H,'_',i), rename(data.frame(get(paste0('likeli_H',H,'_',i))),\n",
    "                                              c(X1=\"model1_exp_lp\",\n",
    "                                                X2=\"model2_exp_lp\",\n",
    "                                                X3=\"model3_exp_lp\",\n",
    "                                                X4=\"model4_exp_lp\",\n",
    "                                                X5=\"model5_exp_lp\",\n",
    "                                                X6=\"model6_exp_lp\",\n",
    "                                                X7=\"model7_exp_lp\",\n",
    "                                                X8=\"model8_exp_lp\",\n",
    "                                                X9=\"model9_exp_lp\",\n",
    "                                                X10=\"model10_exp_lp\",\n",
    "                                                \n",
    "                                                X11=\"model1_log_lp\",\n",
    "                                                X12=\"model2_log_lp\",\n",
    "                                                X13=\"model3_log_lp\",\n",
    "                                                X14=\"model4_log_lp\",\n",
    "                                                X15=\"model5_log_lp\",\n",
    "                                                X16=\"model6_log_lp\",\n",
    "                                                X17=\"model7_log_lp\",\n",
    "                                                X18=\"model8_log_lp\",\n",
    "                                                X19=\"model9_log_lp\",\n",
    "                                                X20=\"model10_log_lp\",\n",
    "                                                X21=\"Y\",\n",
    "                                                X22=\"time\"\n",
    "                                                #                                                X9=\"time2\"\n",
    "                                                #                                            X7=\"hos\"\n",
    "                                                \n",
    "                                              ) ) )\n",
    "    assign(paste0('likeli_H',H,'_',i), arrange(get(paste0('likeli_H',H,'_',i)), by=time) ) # sorting by time2\n",
    "    \n",
    "  }\n",
    "}\n",
    "#View(likeli_H1_5)\n",
    "\n",
    "#----------------------------------------------------------------------------\n",
    "assign.by.char <- function(x,  ...) {\n",
    "  eval.parent(assign(x,  do.call(`[<-`, list(get(x) , ...)))) }\n",
    "\n",
    "#-----------------------------------------------------------------------------\n",
    "for(H in 1:n_H){\n",
    "  for(m in 1:R){\n",
    "    assign(paste0('L_sum_H',H,'_',m) , matrix(nrow=nrow(get(paste0(\"likeli_H\",H,\"_\",m))), ncol=n_H) ) \n",
    "    matrix_name <- paste0('L_sum_H',H,'_',m)\n",
    "    #  model1 <- get(paste0(\"likeli_total_m\",m))[,1]\n",
    "    model1 <- get(paste0(\"likeli_H\",H,\"_\",m))$model1_exp_lp\n",
    "    model2 <- get(paste0(\"likeli_H\",H,\"_\",m))$model2_exp_lp\n",
    "    model3 <- get(paste0(\"likeli_H\",H,\"_\",m))$model3_exp_lp\n",
    "    model4 <- get(paste0(\"likeli_H\",H,\"_\",m))$model4_exp_lp\n",
    "    model5 <- get(paste0(\"likeli_H\",H,\"_\",m))$model5_exp_lp\n",
    "    model6 <- get(paste0(\"likeli_H\",H,\"_\",m))$model6_exp_lp\n",
    "    model7 <- get(paste0(\"likeli_H\",H,\"_\",m))$model7_exp_lp\n",
    "    model8 <- get(paste0(\"likeli_H\",H,\"_\",m))$model8_exp_lp\n",
    "    model9 <- get(paste0(\"likeli_H\",H,\"_\",m))$model9_exp_lp\n",
    "    model10 <- get(paste0(\"likeli_H\",H,\"_\",m))$model10_exp_lp\n",
    "    \n",
    "    for(i in 1:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))){\n",
    "      a1 <- assign.by.char(matrix_name, i, 1, as.numeric(log(sum(model1[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) ) \n",
    "      assign(matrix_name, a1)\n",
    "      a2 <- assign.by.char(matrix_name, i, 2, as.numeric(log(sum(model2[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a2)\n",
    "      a3 <- assign.by.char(matrix_name, i, 3, as.numeric(log(sum(model3[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a3)\n",
    "      a4 <- assign.by.char(matrix_name, i, 4, as.numeric(log(sum(model4[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a4)\n",
    "      a5 <- assign.by.char(matrix_name, i, 5, as.numeric(log(sum(model5[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a5)\n",
    "      a6 <- assign.by.char(matrix_name, i, 6, as.numeric(log(sum(model6[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a6)\n",
    "      a7 <- assign.by.char(matrix_name, i, 7, as.numeric(log(sum(model7[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a7)\n",
    "      a8 <- assign.by.char(matrix_name, i, 8, as.numeric(log(sum(model8[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a8)\n",
    "      a9 <- assign.by.char(matrix_name, i, 9, as.numeric(log(sum(model9[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a9)\n",
    "      a10 <- assign.by.char(matrix_name, i, 10, as.numeric(log(sum(model10[i:nrow(get(paste0(\"likeli_H\",H,\"_\",m)))]))) )\n",
    "      assign(matrix_name, a10)\n",
    "      \n",
    "      \n",
    "          } \n",
    "    assign(paste0('L_sum_H',H,'_',m), rename(data.frame(get(paste0('L_sum_H',H,'_',m))),\n",
    "                                             c(X1=\"model1_log_L_sum\",\n",
    "                                               X2=\"model2_log_L_sum\",\n",
    "                                               X3=\"model3_log_L_sum\",\n",
    "                                               X4=\"model4_log_L_sum\",\n",
    "                                               X5=\"model5_log_L_sum\",\n",
    "                                               X6=\"model6_log_L_sum\",\n",
    "                                               X7=\"model7_log_L_sum\",\n",
    "                                               X8=\"model8_log_L_sum\",\n",
    "                                               X9=\"model9_log_L_sum\",\n",
    "                                               X10=\"model10_log_L_sum\"\n",
    "                                             ) ) )\n",
    "  }\n",
    "  for(m in 1:R){\n",
    "    #---- log_L_sum add\n",
    "    assign(paste0(\"L_sum2_H\",H,\"_\",m), select(cbind(get(paste0(\"likeli_H\",H,\"_\",m)), get(paste0(\"L_sum_H\",H,\"_\",m))),\n",
    "                                              time, model1_log_L_sum, model2_log_L_sum, model3_log_L_sum,model4_log_L_sum,\n",
    "                                              model5_log_L_sum,model6_log_L_sum,model7_log_L_sum,model8_log_L_sum,\n",
    "                                              model9_log_L_sum, model10_log_L_sum) )\n",
    "    #---- ?????? time ?????? L_sum\n",
    "    assign(paste0(\"L_sum3_H\",H,\"_\",m), distinct(get(paste0(\"L_sum2_H\",H,\"_\",m)), time, .keep_all=TRUE) )\n",
    "    assign(paste0(\"likeli2_H\",H,\"_\",m), \n",
    "           inner_join(get(paste0(\"likeli_H\",H,\"_\",m)),get(paste0(\"L_sum3_H\",H,\"_\",m)), by=\"time\") )\n",
    "  }\n",
    "} \n",
    "#View(likeli2_H10_1)\n",
    "#nrow(L_sum3_H1_1)\n",
    "\n",
    "\n",
    "#======================Calculate final likelihood in each hospital\n",
    "H1_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H2_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H3_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H4_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H5_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H6_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H7_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H8_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H9_loss <- matrix(nrow=R, ncol=n_H)\n",
    "H10_loss <- matrix(nrow=R, ncol=n_H)\n",
    "\n",
    "#H1_z2 <- 47\n",
    "#H2_z2 <- 25\n",
    "#H3_z2 <- 17\n",
    "#View(likeli2_H1_1)\n",
    "#View(matrix_name)\n",
    "for(H in 1:n_H){\n",
    "  for(m in 1:R){\n",
    "    matrix_name <- filter(get(paste0(\"likeli2_H\",H,\"_\",m)), Y==1) \n",
    "    \n",
    "    model1_log_L_sum <- matrix_name$model1_log_L_sum\n",
    "    model1_log_lp <- matrix_name$model1_log_lp\n",
    "    model2_log_L_sum <- matrix_name$model2_log_L_sum\n",
    "    model2_log_lp <- matrix_name$model2_log_lp\n",
    "    model3_log_L_sum <- matrix_name$model3_log_L_sum\n",
    "    model3_log_lp <- matrix_name$model3_log_lp\n",
    "    model4_log_L_sum <- matrix_name$model4_log_L_sum\n",
    "    model4_log_lp <- matrix_name$model4_log_lp\n",
    "    model5_log_L_sum <- matrix_name$model5_log_L_sum\n",
    "    model5_log_lp <- matrix_name$model5_log_lp\n",
    "    model6_log_L_sum <- matrix_name$model6_log_L_sum\n",
    "    model6_log_lp <- matrix_name$model6_log_lp\n",
    "    model7_log_L_sum <- matrix_name$model7_log_L_sum\n",
    "    model7_log_lp <- matrix_name$model7_log_lp\n",
    "    model8_log_L_sum <- matrix_name$model8_log_L_sum\n",
    "    model8_log_lp <- matrix_name$model8_log_lp\n",
    "    model9_log_L_sum <- matrix_name$model9_log_L_sum\n",
    "    model9_log_lp <- matrix_name$model9_log_lp\n",
    "    model10_log_L_sum <- matrix_name$model10_log_L_sum\n",
    "    model10_log_lp <- matrix_name$model10_log_lp\n",
    "    \n",
    "    model1_loss <- sum(model1_log_L_sum - model1_log_lp)\n",
    "    model2_loss <- sum(model2_log_L_sum - model2_log_lp)\n",
    "    model3_loss <- sum(model3_log_L_sum - model3_log_lp)\n",
    "    model4_loss <- sum(model4_log_L_sum - model4_log_lp)\n",
    "    model5_loss <- sum(model5_log_L_sum - model5_log_lp)\n",
    "    model6_loss <- sum(model6_log_L_sum - model6_log_lp)\n",
    "    model7_loss <- sum(model7_log_L_sum - model7_log_lp)\n",
    "    model8_loss <- sum(model8_log_L_sum - model8_log_lp)\n",
    "    model9_loss <- sum(model9_log_L_sum - model9_log_lp)\n",
    "    model10_loss <- sum(model10_log_L_sum - model10_log_lp)\n",
    "\n",
    "    #model1_loss <- sum(model1_log_L_sum - model1_log_lp) / get(paste0(\"H\",H,\"_z2\"))\n",
    "    #model2_loss <- sum(model2_log_L_sum - model2_log_lp) / get(paste0(\"H\",H,\"_z2\"))\n",
    "    #model3_loss <- sum(model3_log_L_sum - model3_log_lp) / get(paste0(\"H\",H,\"_z2\"))\n",
    "    \n",
    "    matrix_loss <- paste0(\"H\",H,\"_loss\")\n",
    "    \n",
    "    model1 <- assign.by.char(matrix_loss, m, 1, model1_loss)\n",
    "    assign(matrix_loss, model1)\n",
    "    model2 <- assign.by.char(matrix_loss, m, 2, model2_loss)\n",
    "    assign(matrix_loss, model2)\n",
    "    model3 <- assign.by.char(matrix_loss, m, 3, model3_loss)\n",
    "    assign(matrix_loss, model3)\n",
    "    model4 <- assign.by.char(matrix_loss, m, 4, model4_loss)\n",
    "    assign(matrix_loss, model4)\n",
    "    model5 <- assign.by.char(matrix_loss, m, 5, model5_loss)\n",
    "    assign(matrix_loss, model5)\n",
    "    model6 <- assign.by.char(matrix_loss, m, 6, model6_loss)\n",
    "    assign(matrix_loss, model6)\n",
    "    model7 <- assign.by.char(matrix_loss, m, 7, model7_loss)\n",
    "    assign(matrix_loss, model7)\n",
    "    model8 <- assign.by.char(matrix_loss, m, 8, model8_loss)\n",
    "    assign(matrix_loss, model8)\n",
    "    model9 <- assign.by.char(matrix_loss, m, 9, model9_loss)\n",
    "    assign(matrix_loss, model9)\n",
    "    model10 <- assign.by.char(matrix_loss, m, 10, model10_loss)\n",
    "    assign(matrix_loss, model10)\n",
    "  }\n",
    "}\n",
    "\n",
    "#View(H1_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#======================================================================\n",
    "# Integrate loss from each hospital in local site\n",
    "#======================================================================\n",
    "\n",
    "#--------- loss sum\n",
    "total_loss <- matrix(nrow=R, ncol=n_H)\n",
    "for(i in 1:n_H){\n",
    "  for(m in 1:R){\n",
    "    total_loss[m,i] <- H1_loss[m,i] + H2_loss[m,i] + H3_loss[m,i] + H4_loss[m,i] + H5_loss[m,i] +\n",
    "      H6_loss[m,i] + H7_loss[m,i] + H8_loss[m,i] + H9_loss[m,i] + H10_loss[m,i]\n",
    "  }\n",
    "}\n",
    "#qView(total_loss)\n",
    "#for(H in 1:10){\n",
    "#write.csv(get(paste0(\"H\",H, \"_loss\")), paste0(\"eICU_cox_feature8_ori_H\",H,\"_loss.csv\"))\n",
    "#}\n",
    "#write.csv(total_loss, \"eICU_cox_feature8_ori_total_loss.csv\")\n",
    "\n",
    "#---------- final 200 weights\n",
    "loss_weight <- matrix(ncol=(n_H), nrow=R)\n",
    "for(m in 1:R){ \n",
    "  total <- ((1/total_loss[m,1]) + (1/total_loss[m,2]) + (1/total_loss[m,3]) + (1/total_loss[m,4]) +\n",
    "    (1/total_loss[m,5]) + (1/total_loss[m,6]) + (1/total_loss[m,7]) + (1/total_loss[m,8]) + (1/total_loss[m,9]) + (1/total_loss[m,10]) )\n",
    "    loss_weight[m,1] <- (1/total_loss[m,1])/total\n",
    "    \n",
    "  loss_weight[m,2] <- (1/total_loss[m,2])/total\n",
    "  loss_weight[m,3] <- (1/total_loss[m,3])/total\n",
    "  loss_weight[m,4] <- (1/total_loss[m,4])/total\n",
    "  loss_weight[m,5] <- (1/total_loss[m,5])/total\n",
    "  loss_weight[m,6] <- (1/total_loss[m,6])/total\n",
    "  loss_weight[m,7] <- (1/total_loss[m,7])/total\n",
    "  loss_weight[m,8] <- (1/total_loss[m,8])/total\n",
    "  loss_weight[m,9] <- (1/total_loss[m,9])/total\n",
    "  loss_weight[m,10] <- (1/total_loss[m,10])/total\n",
    "\n",
    "}\n",
    "\n",
    "x <- 8\n",
    "for(j in 1:x){\n",
    "assign(paste0(\"loss_weight_x\",j) , matrix(ncol=(n_H), nrow=R) )\n",
    "}\n",
    "for(m in 1:R){\n",
    "  for(i in 1:x){\n",
    "    total <- 1/(total_model1[m,(x+i)]^2) +\n",
    "             1/(total_model2[m,(x+i)]^2) +\n",
    "             1/(total_model3[m,(x+i)]^2) +\n",
    "             1/(total_model4[m,(x+i)]^2) +\n",
    "             1/(total_model5[m,(x+i)]^2) +\n",
    "             1/(total_model6[m,(x+i)]^2) +\n",
    "             1/(total_model7[m,(x+i)]^2) +\n",
    "             1/(total_model8[m,(x+i)]^2) +\n",
    "             1/(total_model9[m,(x+i)]^2) +\n",
    "             1/(total_model10[m,(x+i)]^2) \n",
    "  for(H in 1:n_H){ \n",
    "    matrix_name <- paste0(\"loss_weight_x\",i)\n",
    "    a <- assign.by.char(matrix_name, m, H, \n",
    "                        (1/(get(paste0(\"total_model\",H))[m,(x+i)]^2) )/ total ) \n",
    "    assign(matrix_name, a) \n",
    "  }\n",
    "  }\n",
    "}\n",
    "\n",
    "for(j in 1:x){\n",
    "  assign(paste0(\"loss_VARwt_x\",j) , matrix(ncol=(n_H), nrow=R) )\n",
    "}\n",
    "\n",
    "x <- 8\n",
    "for(j in 1:x){\n",
    "for(m in 1:R){\n",
    "total <- loss_weight[m,1]*get(paste0(\"loss_weight_x\",j))[m,1] +\n",
    "         loss_weight[m,2]*get(paste0(\"loss_weight_x\",j))[m,2] +\n",
    "         loss_weight[m,3]*get(paste0(\"loss_weight_x\",j))[m,3] +\n",
    "         loss_weight[m,4]*get(paste0(\"loss_weight_x\",j))[m,4] +\n",
    "         loss_weight[m,5]*get(paste0(\"loss_weight_x\",j))[m,5] +\n",
    "         loss_weight[m,6]*get(paste0(\"loss_weight_x\",j))[m,6] +\n",
    "         loss_weight[m,7]*get(paste0(\"loss_weight_x\",j))[m,7] +\n",
    "         loss_weight[m,8]*get(paste0(\"loss_weight_x\",j))[m,8] +\n",
    "         loss_weight[m,9]*get(paste0(\"loss_weight_x\",j))[m,9] +\n",
    "         loss_weight[m,10]*get(paste0(\"loss_weight_x\",j))[m,10] \n",
    "\n",
    "for(H in 1:n_H){\n",
    "  matrix_name <- paste0(\"loss_VARwt_x\",j)\n",
    "  a <- assign.by.char(matrix_name, m, H, \n",
    "                      (loss_weight[m,H]*get(paste0(\"loss_weight_x\",j))[m,H])/ total ) \n",
    "  assign(matrix_name, a) \n",
    "}\n",
    "}\n",
    "}\n",
    "\n",
    "x <- 8\n",
    "loss_WIM_para_VAR <- matrix(nrow=R, ncol=x)\n",
    "for(i in 1:R){\n",
    "  for(j in 1:x){\n",
    "    loss_WIM_para_VAR[i, j] <- \n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,1] * total_model1[i,j] +\n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,2] * total_model2[i,j] +\n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,3] * total_model3[i,j] +\n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,4] * total_model4[i,j] + \n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,5] * total_model5[i,j] + \n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,6] * total_model6[i,j] +\n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,7] * total_model7[i,j] + \n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,8] * total_model8[i,j] + \n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,9] * total_model9[i,j] +\n",
    "      get(paste0(\"loss_VARwt_x\",j))[i,10] * total_model10[i,j]\n",
    "  }\n",
    "}\n",
    "\n",
    "\n",
    "#------------------- \"SE weight\" Integrated wieght-based parameter point, CI => percentile\n",
    "loss_WIM_avg_VAR <- as.data.frame(matrix(ncol=3*2, nrow=x))\n",
    "\n",
    "for(x in 1:8){\n",
    "  loss_WIM_avg_VAR[x,1] <- mean(loss_WIM_para_VAR[,x])\n",
    "  loss_WIM_avg_VAR[x,2] <- quantile(loss_WIM_para_VAR[,x], probs=c(0.025))\n",
    "  loss_WIM_avg_VAR[x,3] <- quantile(loss_WIM_para_VAR[,x], probs=c(0.975))\n",
    "  \n",
    "  loss_WIM_avg_VAR[x,4] <- exp(mean(loss_WIM_para_VAR[,x]))\n",
    "  loss_WIM_avg_VAR[x,5] <- exp(quantile(loss_WIM_para_VAR[,x], probs=c(0.025)))\n",
    "  loss_WIM_avg_VAR[x,6] <- exp(quantile(loss_WIM_para_VAR[,x], probs=c(0.975)))\n",
    "  \n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] 0.1203809\n",
      "[1] 0.1186746\n",
      "[1] 0.1182899\n",
      "[1] 0.1168751\n",
      "[1] 0.06704483\n",
      "[1] 0.1079526\n",
      "[1] 0.1083175\n",
      "[1] 0.09094439\n",
      "[1] 0.09398055\n",
      "[1] 0.05753941\n"
     ]
    }
   ],
   "source": [
    "for(i in 1:10){\n",
    "print(mean(loss_weight[,i]))\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] 0.2894871\n",
      "[1] 0.1639389\n",
      "[1] 0.1342043\n",
      "[1] 0.1081811\n",
      "[1] 0.05833146\n",
      "[1] 0.06898481\n",
      "[1] 0.06450092\n",
      "[1] 0.03938356\n",
      "[1] 0.04918732\n",
      "[1] 0.02380058\n"
     ]
    }
   ],
   "source": [
    "for(i in 1:n_H){\n",
    "  print(mean(loss_VARwt_x8[,i]))\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "write.csv(loss_WIM_avg_VAR, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_loss_WIM_avg.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "write.csv(total_model1, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model1.csv\")\n",
    "write.csv(total_model2, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model2.csv\")\n",
    "write.csv(total_model3, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model3.csv\")\n",
    "write.csv(total_model4, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model4.csv\")\n",
    "write.csv(total_model5, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model5.csv\")\n",
    "write.csv(total_model6, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model6.csv\")\n",
    "write.csv(total_model7, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model7.csv\")\n",
    "write.csv(total_model8, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model8.csv\")\n",
    "write.csv(total_model9, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model9.csv\")\n",
    "write.csv(total_model10, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_total_model10.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "write.csv(H1_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H1_loss.csv\")\n",
    "write.csv(H2_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H2_loss.csv\")\n",
    "write.csv(H3_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H3_loss.csv\")\n",
    "write.csv(H4_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H4_loss.csv\")\n",
    "write.csv(H5_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H5_loss.csv\")\n",
    "write.csv(H6_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H6_loss.csv\")\n",
    "write.csv(H7_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H7_loss.csv\")\n",
    "write.csv(H8_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H8_loss.csv\")\n",
    "write.csv(H9_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H9_loss.csv\")\n",
    "write.csv(H10_loss, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_standard_H10_loss.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "#for(j in 1:x){\n",
    "#write.csv(paste0(\"loss_VARwt_x\",j) , paste0(\"cox_eICU_H10_feature8_loss_VARwt_x\",j,\".csv\"))\n",
    "#}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# ------------ Survival Estimation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#======================================================================================== \n",
    "#integration of H1, H2, H3 time & sum(exp_lp) of all risk sets \n",
    "#======================================================================================== \n",
    "\n",
    "#################################\"Version 1\": based on 200 weight-based parameter\n",
    "# loss_WIM_para (200*p matrix) is sent to each hospital (Step 5)\n",
    "\n",
    "#- all event point \n",
    "\n",
    "central_time <- arrange(rbind(H1_time, H2_time, H3_time, H4_time, H5_time,\n",
    "                              H6_time, H7_time, H8_time, H9_time, H10_time),time) # implement in each hospital\n",
    "\n",
    "\n",
    "grouped <- group_by(central_time, time)\n",
    "central_time2 <- summarise(grouped, n=n(),\n",
    "                           event_total=sum(n_event, na.rm=TRUE)) \n",
    "\n",
    "#View(central_time2)\n",
    "#nrow(central_time2)\n",
    "\n",
    "#------------- all Hospitals\n",
    "\n",
    "\n",
    "for(H in 1:party){\n",
    "  for(i in 1:R){\n",
    "    assign(paste0('H',H,'_risk',i) , matrix(nrow=nrow(get(paste0('H',H))), ncol=4 )) \n",
    "    matrix_name <- paste0('H',H,'_risk',i) \n",
    "    for(n in 1:nrow(get(paste0('H',H)))){\n",
    "      a <- assign.by.char(matrix_name, n, 1, get(paste0('H',H))$time[n] )\n",
    "      assign(matrix_name, a) \n",
    "      \n",
    "      b <- assign.by.char(matrix_name, n, 2, get(paste0('H',H))$Y[n] )\n",
    "      assign(matrix_name, b) \n",
    "      \n",
    "      wim_exp_lp <-exp(get(paste0('H',H))$x1[n]*loss_WIM_para_VAR[i,1] + get(paste0('H',H))$x2[n]*loss_WIM_para_VAR[i,2] + \n",
    "                         get(paste0('H',H))$x3[n]*loss_WIM_para_VAR[i,3] + get(paste0('H',H))$x4[n]*loss_WIM_para_VAR[i,4] + \n",
    "                         get(paste0('H',H))$x5[n]*loss_WIM_para_VAR[i,5] + get(paste0('H',H))$x6[n]*loss_WIM_para_VAR[i,6] + \n",
    "                         get(paste0('H',H))$x7[n]*loss_WIM_para_VAR[i,7] + get(paste0('H',H))$x8[n]*loss_WIM_para_VAR[i,8]  ) \n",
    "      c <- assign.by.char(matrix_name, n, 3, wim_exp_lp)\n",
    "      assign(matrix_name, c) \n",
    "    }\n",
    "    assign(paste0('H',H,'_risk',i), arrange(as.data.frame(get(paste0('H',H,'_risk',i))), by=V1) ) \n",
    "    assign(paste0('H',H,'_risk',i), rename( get(paste0('H',H,'_risk',i)),\n",
    "                                            c(V1=\"time\",\n",
    "                                              V2=\"Y\",\n",
    "                                              V3=paste0(\"H\",H,\"_exp_lp\"),\n",
    "                                              V4=paste0(\"H\",H,\"_exp_sum\") )\n",
    "    ) )\n",
    "  }\n",
    "}\n",
    "#View(H10_risk1)\n",
    "\n",
    "#---------------------------------------------\n",
    "\n",
    "for(H in 1:10){\n",
    "  for(i in 1:R){\n",
    "    matrix_name <- paste0('H',H,'_risk',i)\n",
    "    exp <- get(paste0('H',H,'_risk',i))[,3]\n",
    "    for(n in 1:nrow(get(paste0('H',H,'_risk',i)))){\n",
    "      a <- assign.by.char(matrix_name, n, 4, sum(exp[n:nrow(get(paste0('H',H,'_risk',i)))]))\n",
    "      assign(matrix_name, a)\n",
    "      \n",
    "    }\n",
    "  }\n",
    "}\n",
    "#View(H10_risk1)\n",
    "\n",
    "\n",
    "for(H in 1:10){\n",
    "  for(i in 1:R){\n",
    "    assign( paste0(\"H\",H,\"_risk\",i,\"_2\"), \n",
    "            distinct(select(get(paste0(\"H\",H,\"_risk\",i)), time, paste0(\"H\",H,\"_exp_sum\")), time, .keep_all=TRUE) )\n",
    "    \n",
    "    assign(paste0(\"H\",H,\"_risk\",i,\"_3\"),\n",
    "           arrange(full_join(central_time2,  get(paste0(\"H\",H,\"_risk\",i,\"_2\")), by=\"time\"), by=desc(time)))  \n",
    "  }\n",
    "}\n",
    "#View(H10_risk1_3)\n",
    "\n",
    "#***********************************\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H1_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H1_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H1_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H1_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H2_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H2_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H2_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H2_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H3_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H3_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H3_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H3_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H4_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H4_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H4_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H4_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H5_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H5_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H5_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H5_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H6_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H6_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H6_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H6_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H7_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H7_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H7_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H7_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H8_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H8_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H8_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H8_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H9_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H9_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H9_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H9_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- get(paste0(\"H10_risk\",i,\"_3\"))\n",
    "  exp_sum <- matrix_name$H10_exp_sum\n",
    "  \n",
    "  exp_sum[1] <- \n",
    "    ifelse(is.na(exp_sum[1])==\"TRUE\", 0, exp_sum ) \n",
    "  \n",
    "  matrix_name$H10_exp2_sum <- exp_sum \n",
    "  assign(paste0(\"H10_risk\",i,\"_3\"), matrix_name)\n",
    "}\n",
    "\n",
    "#***********************************\n",
    "\n",
    "#View(H10_risk5_3)\n",
    "#H1_risk1_3 <- arrange(full_join(central_time2, H1_risk1_2, by=\"time\"), by=desc(time))\n",
    "for(H in 1:party){\n",
    "  for(i in 1:R){\n",
    "    \n",
    "    assign(paste0(\"H\",H,\"_risk\",i,\"_3\"), \n",
    "           get(paste0(\"H\",H,\"_risk\",i,\"_3\")) %>% \n",
    "             mutate(exp_sum2 = na.locf(get(paste0(\"H\",H,\"_exp2_sum\")), framLast=FALSE)))\n",
    "    assign(paste0('H',H,'_risk',i,\"_3\"), rename( get(paste0('H',H,'_risk',i,\"_3\")),\n",
    "                                                 c(exp_sum2=paste0(\"H\",H,\"_exp_sum2\"))\n",
    "    ) )\n",
    "    \n",
    "    \n",
    "  }\n",
    "}\n",
    "\n",
    "\n",
    "#View(H10_risk1_3)\n",
    "#H1_risk1_3 <- H1_risk1_3 %>% \n",
    "#  mutate(H1_exp_sum2 = na.locf(H1_exp_sum, framLast=FALSE))\n",
    "for(H in 1:party){\n",
    "  for(i in 1:R){\n",
    "    assign( paste0(\"H\",H,\"_risk\",i,\"_share\"),\n",
    "            select(arrange(filter(get(paste0(\"H\",H,\"_risk\",i,\"_3\")), \n",
    "                                  is.na(get(paste0(\"H\",H,\"_risk\",i,\"_3\"))$n)==\"FALSE\"), by=time), -paste0(\"H\",H,\"_exp_sum\"))\n",
    "    )    \n",
    "  }\n",
    "}\n",
    "#View(H1_risk2_share)\n",
    "\n",
    "#View(loss_WIM_para)\n",
    "\n",
    "#H1_risk1_share <- select(arrange(filter(H1_risk1_3, is.na(H1_risk1_3$n)==\"FALSE\"), by=time), -H1_exp_sum)\n",
    "#View(H1_risk1_share)\n",
    "\n",
    "#table(H3_risk100_share$event_total)\n",
    "\n",
    "#============send [H1_risk1_share ~ H1_risk200_share] from H1\n",
    "#============send [H2_risk1_share ~ H2_risk200_share] from H2\n",
    "#============send [H3_risk1_share ~ H3_risk200_share] from H3\n",
    "#----------------------------------------------------------------------------\n",
    "assign.by.char <- function(x,  ...) {\n",
    "  eval.parent(assign(x,  do.call(`[<-`, list(get(x) , ...)))) }\n",
    "\n",
    "\n",
    "for(i in 1:R){\n",
    "  assign(paste0(\"total_risk\",i,\"_share\"), \n",
    "         cbind(get(paste0(\"H1_risk\",i,\"_share\")), get(paste0(\"H2_risk\",i,\"_share\")), \n",
    "               get(paste0(\"H3_risk\",i,\"_share\")), get(paste0(\"H4_risk\",i,\"_share\")),\n",
    "               get(paste0(\"H5_risk\",i,\"_share\")), get(paste0(\"H6_risk\",i,\"_share\")),\n",
    "               get(paste0(\"H7_risk\",i,\"_share\")), get(paste0(\"H8_risk\",i,\"_share\")),\n",
    "               get(paste0(\"H9_risk\",i,\"_share\")), get(paste0(\"H10_risk\",i,\"_share\"))\n",
    "         ) )\n",
    "}\n",
    "#View(total_risk5_share)\n",
    "\n",
    "for(i in 1:R){\n",
    "  assign(paste0(\"basesurv_\",i), matrix(nrow=nrow(get(paste0(\"total_risk\",i,\"_share\"))), ncol=3) )\n",
    "  matrix_name <- paste0(\"basesurv_\",i)\n",
    "  H1_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H1_exp_sum2\n",
    "  H2_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H2_exp_sum2\n",
    "  H3_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H3_exp_sum2\n",
    "  H4_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H4_exp_sum2\n",
    "  H5_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H5_exp_sum2\n",
    "  H6_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H6_exp_sum2\n",
    "  H7_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H7_exp_sum2\n",
    "  H8_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H8_exp_sum2\n",
    "  H9_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H9_exp_sum2\n",
    "  H10_exp_sum <- get(paste0(\"total_risk\",i,\"_share\"))$H10_exp_sum2\n",
    "  \n",
    "  time <- get(paste0(\"total_risk\",i,\"_share\"))$time\n",
    "  event <- get(paste0(\"total_risk\",i,\"_share\"))$event_total\n",
    "  \n",
    "  for(n in 1:nrow(get(paste0(\"total_risk\",i,\"_share\")))){\n",
    "    t <- assign.by.char(matrix_name, n, 1, time[n])\n",
    "    assign(matrix_name, t)\n",
    "    haz <- assign.by.char(matrix_name, n, 2, event[n]/(H1_exp_sum[n]+H2_exp_sum[n]+H3_exp_sum[n]+H4_exp_sum[n]+H5_exp_sum[n]+\n",
    "                                                         H6_exp_sum[n]+H7_exp_sum[n]+H8_exp_sum[n]+H9_exp_sum[n]+H10_exp_sum[n]))\n",
    "    assign(matrix_name, haz)\n",
    "  }\n",
    "}\n",
    "#View(basesurv_5)\n",
    "\n",
    "for(i in 1:R){\n",
    "  matrix_name <- paste0(\"basesurv_\",i)\n",
    "  haz <- get(paste0(\"basesurv_\",i))[,2]\n",
    "  for(n in 1:nrow(get(paste0(\"total_risk\",i,\"_share\")))){\n",
    "    cum_haz <- assign.by.char(matrix_name, n, 3, sum(haz[1:n])  )\n",
    "    assign(matrix_name, cum_haz)\n",
    "    #   cum_surv <- assign.by.char(matrix_name, n, 4, exp(-1*(sum(haz[1:n]))) )\n",
    "    #    assign(matrix_name, cum_surv)\n",
    "  }\n",
    "  assign(paste0(\"basesurv_\",i), rename( as.data.frame(get(paste0(\"basesurv_\",i))),\n",
    "                                        c(V1=\"time\",\n",
    "                                          V2=\"haz\",\n",
    "                                          V3=\"cumhaz\") ) )\n",
    "}\n",
    "\n",
    "#View(basesurv_200)\n",
    "\n",
    "\n",
    "#--------------------------- comparison with central survival\n",
    "#View(central)\n",
    "#--------Central\n",
    "central_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                      data=central, ties=\"breslow\")\n",
    "\n",
    "H1_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H1, ties=\"breslow\")\n",
    "H2_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H2, ties=\"breslow\")\n",
    "H3_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H3, ties=\"breslow\")\n",
    "H4_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H4, ties=\"breslow\")\n",
    "H5_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H5, ties=\"breslow\")\n",
    "H6_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H6, ties=\"breslow\")\n",
    "H7_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H7, ties=\"breslow\")\n",
    "H8_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H8, ties=\"breslow\")\n",
    "H9_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                 data=H9, ties=\"breslow\")\n",
    "H10_fit <- coxph( Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 , \n",
    "                  data=H10, ties=\"breslow\")\n",
    "\n",
    "\n",
    "#head(basehaz(central_fit, centered=FALSE))\n",
    "#exp(-basehaz(central_fit, centered=FALSE)$hazard)\n",
    "\n",
    "\n",
    "surv_central <- survfit(central_fit, conf.int=.95, \n",
    "                        c(x1=59.91168, x2=9.810997, x3=36.20453, x4=7.34948, x5=41.04722, x6=31.10893, x7=1.509144, x8=59.0167 ))\n",
    "#surv_H1 <- survfit(H1_fit, conf.int=.95, \n",
    "#                        c(x1=59.91168, x2=9.810997, x3=36.20453, x4=7.34948, x5=41.04722, x6=31.10893, x7=1.509144, x8=59.0167 ))\n",
    "\n",
    "\n",
    "\n",
    "#plot(surv_H1)\n",
    "\n",
    "\n",
    "\n",
    "#----------------------------------------------------------------------------------------\n",
    "# 200 survival calculation\n",
    "#----------------------------------------------------------------------------------------\n",
    "\n",
    "#View(loss_WIM_para)\n",
    "\n",
    "for( i in 1:R){\n",
    "  assign(paste0(\"ex\",i),\n",
    "         exp(loss_WIM_para_VAR[i,1] * 59.91168 + loss_WIM_para_VAR[i,2] * 9.810997 + loss_WIM_para_VAR[i,3] * 36.20453 + \n",
    "               loss_WIM_para_VAR[i,4] * 7.34948 + loss_WIM_para_VAR[i,5] * 41.04722 + loss_WIM_para_VAR[i,6] * 31.10893 + \n",
    "               loss_WIM_para_VAR[i,7] * 1.509144 + loss_WIM_para_VAR[i,8] * 59.0167) )\n",
    "}\n",
    "\n",
    "#ex <- exp(loss_WIM_avg[1,1] * 8 + loss_WIM_avg[2,1] * 7 + loss_WIM_avg[3,1] * 31 + loss_WIM_avg[4,1] * 62 +\n",
    "#          loss_WIM_avg[5,1] * 32 + loss_WIM_avg[6,1] * 2 + loss_WIM_avg[7,1] * 3 + loss_WIM_avg[8,1] * 57 +\n",
    "#          loss_WIM_avg[9,1] * 40 + loss_WIM_avg[10,1] * 131 + loss_WIM_avg[11,1] * 109 )\n",
    "\n",
    "#---- 위 지정한 x1~ x8 patient에 대한 각 time point에서의 surv\n",
    "for(i in 1:R){\n",
    "  base <- get(paste0(\"basesurv_\",i))\n",
    "  matrix_name <- paste0(\"basesurv_\",i)\n",
    "  ex <- get(paste0(\"ex\",i))\n",
    "  for(n in 1:nrow(base)){\n",
    "    #  base[n,4] <- exp((-1)* base[n,3] * ex)\n",
    "    \n",
    "    a <- assign.by.char(matrix_name, n, 4, exp((-1)* base[n,3] * ex))\n",
    "    assign(matrix_name, a)\n",
    "  }\n",
    "}\n",
    "#View(basesurv_total)\n",
    "\n",
    "basesurv_total <-matrix(nrow=nrow(basesurv_1), ncol=(4+R))\n",
    "#- time\n",
    "basesurv_total[,1] <- basesurv_1[,1]\n",
    "#-- R개 WIM para에 의한 surv\n",
    "for(i in 1:R){\n",
    "  basesurv_total[,(i+1)] <- get(paste0(\"basesurv_\",i))[,4]\n",
    "}\n",
    "#View(basesurv_total)\n",
    "for(n in 1:nrow(basesurv_total)){\n",
    "  #-- mean surv\n",
    "  basesurv_total[n,(R+2)] <- mean(basesurv_total[n,2:(1+R)])\n",
    "  #-- lower CI\n",
    "  basesurv_total[n,(R+3)] <- quantile(basesurv_total[n,2:(1+R)], probs=c(0.025))\n",
    "  #-- upper CI\n",
    "  basesurv_total[n,(R+4)] <- quantile(basesurv_total[n,2:(1+R)], probs=c(0.975))\n",
    "}\n",
    "#write.csv(basesurv_total, \"cox_eicu_H10_feature8_VARwt_basesurv_total.csv\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A data.frame: 521 × 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>time</th><th scope=col>haz</th><th scope=col>cumhaz</th><th scope=col>V4</th></tr>\n",
       "\t<tr><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th><th scope=col>&lt;dbl&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>0.1722</td><td>6.884384e+11</td><td>6.884384e+11</td><td>0.9998015</td></tr>\n",
       "\t<tr><td>0.1875</td><td>6.893582e+11</td><td>1.377797e+12</td><td>0.9996027</td></tr>\n",
       "\t<tr><td>0.1937</td><td>6.949328e+11</td><td>2.072729e+12</td><td>0.9994023</td></tr>\n",
       "\t<tr><td>0.2062</td><td>1.390223e+12</td><td>3.462953e+12</td><td>0.9990017</td></tr>\n",
       "\t<tr><td>0.2256</td><td>6.965314e+11</td><td>4.159484e+12</td><td>0.9988010</td></tr>\n",
       "\t<tr><td>0.2340</td><td>6.976498e+11</td><td>4.857134e+12</td><td>0.9986000</td></tr>\n",
       "\t<tr><td>0.2375</td><td>6.979619e+11</td><td>5.555096e+12</td><td>0.9983990</td></tr>\n",
       "\t<tr><td>0.2430</td><td>6.992537e+11</td><td>6.254350e+12</td><td>0.9981977</td></tr>\n",
       "\t<tr><td>0.2486</td><td>7.002644e+11</td><td>6.954614e+12</td><td>0.9979961</td></tr>\n",
       "\t<tr><td>0.2576</td><td>7.005927e+11</td><td>7.655207e+12</td><td>0.9977945</td></tr>\n",
       "\t<tr><td>0.2763</td><td>7.006340e+11</td><td>8.355841e+12</td><td>0.9975928</td></tr>\n",
       "\t<tr><td>0.2833</td><td>7.008006e+11</td><td>9.056641e+12</td><td>0.9973912</td></tr>\n",
       "\t<tr><td>0.3090</td><td>7.018442e+11</td><td>9.758485e+12</td><td>0.9971893</td></tr>\n",
       "\t<tr><td>0.3145</td><td>7.027860e+11</td><td>1.046127e+13</td><td>0.9969872</td></tr>\n",
       "\t<tr><td>0.3208</td><td>7.040796e+11</td><td>1.116535e+13</td><td>0.9967848</td></tr>\n",
       "\t<tr><td>0.3645</td><td>1.414928e+12</td><td>1.258028e+13</td><td>0.9963781</td></tr>\n",
       "\t<tr><td>0.3673</td><td>7.084251e+11</td><td>1.328870e+13</td><td>0.9961745</td></tr>\n",
       "\t<tr><td>0.3701</td><td>7.086055e+11</td><td>1.399731e+13</td><td>0.9959709</td></tr>\n",
       "\t<tr><td>0.3715</td><td>7.091177e+11</td><td>1.470643e+13</td><td>0.9957672</td></tr>\n",
       "\t<tr><td>0.3729</td><td>7.119634e+11</td><td>1.541839e+13</td><td>0.9955628</td></tr>\n",
       "\t<tr><td>0.3777</td><td>7.160444e+11</td><td>1.613444e+13</td><td>0.9953572</td></tr>\n",
       "\t<tr><td>0.3812</td><td>7.172771e+11</td><td>1.685171e+13</td><td>0.9951513</td></tr>\n",
       "\t<tr><td>0.3965</td><td>7.181414e+11</td><td>1.756985e+13</td><td>0.9949452</td></tr>\n",
       "\t<tr><td>0.4201</td><td>7.183837e+11</td><td>1.828824e+13</td><td>0.9947390</td></tr>\n",
       "\t<tr><td>0.4243</td><td>7.185207e+11</td><td>1.900676e+13</td><td>0.9945329</td></tr>\n",
       "\t<tr><td>0.4395</td><td>7.200428e+11</td><td>1.972680e+13</td><td>0.9943264</td></tr>\n",
       "\t<tr><td>0.4409</td><td>7.218036e+11</td><td>2.044860e+13</td><td>0.9941194</td></tr>\n",
       "\t<tr><td>0.4513</td><td>7.225986e+11</td><td>2.117120e+13</td><td>0.9939122</td></tr>\n",
       "\t<tr><td>0.4520</td><td>7.242014e+11</td><td>2.189540e+13</td><td>0.9937046</td></tr>\n",
       "\t<tr><td>0.4597</td><td>7.249036e+11</td><td>2.262031e+13</td><td>0.9934969</td></tr>\n",
       "\t<tr><td>⋮</td><td>⋮</td><td>⋮</td><td>⋮</td></tr>\n",
       "\t<tr><td>15.1402</td><td>1.078935e+13</td><td>9.860861e+14</td><td>0.7524536</td></tr>\n",
       "\t<tr><td>15.2659</td><td>1.090912e+13</td><td>9.969952e+14</td><td>0.7500897</td></tr>\n",
       "\t<tr><td>15.4138</td><td>1.102090e+13</td><td>1.008016e+15</td><td>0.7477091</td></tr>\n",
       "\t<tr><td>16.2597</td><td>1.215347e+13</td><td>1.020170e+15</td><td>0.7450927</td></tr>\n",
       "\t<tr><td>17.2062</td><td>1.337248e+13</td><td>1.033542e+15</td><td>0.7422244</td></tr>\n",
       "\t<tr><td>17.4125</td><td>1.357526e+13</td><td>1.047117e+15</td><td>0.7393239</td></tr>\n",
       "\t<tr><td>17.8541</td><td>1.526836e+13</td><td>1.062386e+15</td><td>0.7360752</td></tr>\n",
       "\t<tr><td>18.3347</td><td>1.614617e+13</td><td>1.078532e+15</td><td>0.7326552</td></tr>\n",
       "\t<tr><td>18.4493</td><td>1.616600e+13</td><td>1.094698e+15</td><td>0.7292470</td></tr>\n",
       "\t<tr><td>18.6638</td><td>1.730981e+13</td><td>1.112008e+15</td><td>0.7256152</td></tr>\n",
       "\t<tr><td>18.7069</td><td>1.750403e+13</td><td>1.129512e+15</td><td>0.7219610</td></tr>\n",
       "\t<tr><td>19.1194</td><td>1.820351e+13</td><td>1.147715e+15</td><td>0.7181803</td></tr>\n",
       "\t<tr><td>19.8458</td><td>1.983117e+13</td><td>1.167546e+15</td><td>0.7140842</td></tr>\n",
       "\t<tr><td>20.0812</td><td>2.049940e+13</td><td>1.188046e+15</td><td>0.7098745</td></tr>\n",
       "\t<tr><td>20.1194</td><td>2.084786e+13</td><td>1.208894e+15</td><td>0.7056187</td></tr>\n",
       "\t<tr><td>20.1979</td><td>2.088100e+13</td><td>1.229775e+15</td><td>0.7013818</td></tr>\n",
       "\t<tr><td>20.6458</td><td>2.169132e+13</td><td>1.251466e+15</td><td>0.6970074</td></tr>\n",
       "\t<tr><td>20.6840</td><td>2.178611e+13</td><td>1.273252e+15</td><td>0.6926413</td></tr>\n",
       "\t<tr><td>20.7777</td><td>2.208560e+13</td><td>1.295338e+15</td><td>0.6882431</td></tr>\n",
       "\t<tr><td>20.9750</td><td>2.247651e+13</td><td>1.317814e+15</td><td>0.6837957</td></tr>\n",
       "\t<tr><td>21.2902</td><td>2.282366e+13</td><td>1.340638e+15</td><td>0.6793091</td></tr>\n",
       "\t<tr><td>21.3534</td><td>2.295308e+13</td><td>1.363591e+15</td><td>0.6748267</td></tr>\n",
       "\t<tr><td>22.0375</td><td>2.546556e+13</td><td>1.389056e+15</td><td>0.6698882</td></tr>\n",
       "\t<tr><td>22.9368</td><td>2.703522e+13</td><td>1.416092e+15</td><td>0.6646849</td></tr>\n",
       "\t<tr><td>25.9909</td><td>4.343033e+13</td><td>1.459522e+15</td><td>0.6564106</td></tr>\n",
       "\t<tr><td>27.0520</td><td>4.909298e+13</td><td>1.508615e+15</td><td>0.6471814</td></tr>\n",
       "\t<tr><td>27.7284</td><td>5.696325e+13</td><td>1.565578e+15</td><td>0.6366352</td></tr>\n",
       "\t<tr><td>28.7402</td><td>7.384544e+13</td><td>1.639424e+15</td><td>0.6232188</td></tr>\n",
       "\t<tr><td>32.9868</td><td>1.213142e+14</td><td>1.760738e+15</td><td>0.6017891</td></tr>\n",
       "\t<tr><td>33.4604</td><td>1.303750e+14</td><td>1.891113e+15</td><td>0.5795797</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 521 × 4\n",
       "\\begin{tabular}{llll}\n",
       " time & haz & cumhaz & V4\\\\\n",
       " <dbl> & <dbl> & <dbl> & <dbl>\\\\\n",
       "\\hline\n",
       "\t 0.1722 & 6.884384e+11 & 6.884384e+11 & 0.9998015\\\\\n",
       "\t 0.1875 & 6.893582e+11 & 1.377797e+12 & 0.9996027\\\\\n",
       "\t 0.1937 & 6.949328e+11 & 2.072729e+12 & 0.9994023\\\\\n",
       "\t 0.2062 & 1.390223e+12 & 3.462953e+12 & 0.9990017\\\\\n",
       "\t 0.2256 & 6.965314e+11 & 4.159484e+12 & 0.9988010\\\\\n",
       "\t 0.2340 & 6.976498e+11 & 4.857134e+12 & 0.9986000\\\\\n",
       "\t 0.2375 & 6.979619e+11 & 5.555096e+12 & 0.9983990\\\\\n",
       "\t 0.2430 & 6.992537e+11 & 6.254350e+12 & 0.9981977\\\\\n",
       "\t 0.2486 & 7.002644e+11 & 6.954614e+12 & 0.9979961\\\\\n",
       "\t 0.2576 & 7.005927e+11 & 7.655207e+12 & 0.9977945\\\\\n",
       "\t 0.2763 & 7.006340e+11 & 8.355841e+12 & 0.9975928\\\\\n",
       "\t 0.2833 & 7.008006e+11 & 9.056641e+12 & 0.9973912\\\\\n",
       "\t 0.3090 & 7.018442e+11 & 9.758485e+12 & 0.9971893\\\\\n",
       "\t 0.3145 & 7.027860e+11 & 1.046127e+13 & 0.9969872\\\\\n",
       "\t 0.3208 & 7.040796e+11 & 1.116535e+13 & 0.9967848\\\\\n",
       "\t 0.3645 & 1.414928e+12 & 1.258028e+13 & 0.9963781\\\\\n",
       "\t 0.3673 & 7.084251e+11 & 1.328870e+13 & 0.9961745\\\\\n",
       "\t 0.3701 & 7.086055e+11 & 1.399731e+13 & 0.9959709\\\\\n",
       "\t 0.3715 & 7.091177e+11 & 1.470643e+13 & 0.9957672\\\\\n",
       "\t 0.3729 & 7.119634e+11 & 1.541839e+13 & 0.9955628\\\\\n",
       "\t 0.3777 & 7.160444e+11 & 1.613444e+13 & 0.9953572\\\\\n",
       "\t 0.3812 & 7.172771e+11 & 1.685171e+13 & 0.9951513\\\\\n",
       "\t 0.3965 & 7.181414e+11 & 1.756985e+13 & 0.9949452\\\\\n",
       "\t 0.4201 & 7.183837e+11 & 1.828824e+13 & 0.9947390\\\\\n",
       "\t 0.4243 & 7.185207e+11 & 1.900676e+13 & 0.9945329\\\\\n",
       "\t 0.4395 & 7.200428e+11 & 1.972680e+13 & 0.9943264\\\\\n",
       "\t 0.4409 & 7.218036e+11 & 2.044860e+13 & 0.9941194\\\\\n",
       "\t 0.4513 & 7.225986e+11 & 2.117120e+13 & 0.9939122\\\\\n",
       "\t 0.4520 & 7.242014e+11 & 2.189540e+13 & 0.9937046\\\\\n",
       "\t 0.4597 & 7.249036e+11 & 2.262031e+13 & 0.9934969\\\\\n",
       "\t ⋮ & ⋮ & ⋮ & ⋮\\\\\n",
       "\t 15.1402 & 1.078935e+13 & 9.860861e+14 & 0.7524536\\\\\n",
       "\t 15.2659 & 1.090912e+13 & 9.969952e+14 & 0.7500897\\\\\n",
       "\t 15.4138 & 1.102090e+13 & 1.008016e+15 & 0.7477091\\\\\n",
       "\t 16.2597 & 1.215347e+13 & 1.020170e+15 & 0.7450927\\\\\n",
       "\t 17.2062 & 1.337248e+13 & 1.033542e+15 & 0.7422244\\\\\n",
       "\t 17.4125 & 1.357526e+13 & 1.047117e+15 & 0.7393239\\\\\n",
       "\t 17.8541 & 1.526836e+13 & 1.062386e+15 & 0.7360752\\\\\n",
       "\t 18.3347 & 1.614617e+13 & 1.078532e+15 & 0.7326552\\\\\n",
       "\t 18.4493 & 1.616600e+13 & 1.094698e+15 & 0.7292470\\\\\n",
       "\t 18.6638 & 1.730981e+13 & 1.112008e+15 & 0.7256152\\\\\n",
       "\t 18.7069 & 1.750403e+13 & 1.129512e+15 & 0.7219610\\\\\n",
       "\t 19.1194 & 1.820351e+13 & 1.147715e+15 & 0.7181803\\\\\n",
       "\t 19.8458 & 1.983117e+13 & 1.167546e+15 & 0.7140842\\\\\n",
       "\t 20.0812 & 2.049940e+13 & 1.188046e+15 & 0.7098745\\\\\n",
       "\t 20.1194 & 2.084786e+13 & 1.208894e+15 & 0.7056187\\\\\n",
       "\t 20.1979 & 2.088100e+13 & 1.229775e+15 & 0.7013818\\\\\n",
       "\t 20.6458 & 2.169132e+13 & 1.251466e+15 & 0.6970074\\\\\n",
       "\t 20.6840 & 2.178611e+13 & 1.273252e+15 & 0.6926413\\\\\n",
       "\t 20.7777 & 2.208560e+13 & 1.295338e+15 & 0.6882431\\\\\n",
       "\t 20.9750 & 2.247651e+13 & 1.317814e+15 & 0.6837957\\\\\n",
       "\t 21.2902 & 2.282366e+13 & 1.340638e+15 & 0.6793091\\\\\n",
       "\t 21.3534 & 2.295308e+13 & 1.363591e+15 & 0.6748267\\\\\n",
       "\t 22.0375 & 2.546556e+13 & 1.389056e+15 & 0.6698882\\\\\n",
       "\t 22.9368 & 2.703522e+13 & 1.416092e+15 & 0.6646849\\\\\n",
       "\t 25.9909 & 4.343033e+13 & 1.459522e+15 & 0.6564106\\\\\n",
       "\t 27.0520 & 4.909298e+13 & 1.508615e+15 & 0.6471814\\\\\n",
       "\t 27.7284 & 5.696325e+13 & 1.565578e+15 & 0.6366352\\\\\n",
       "\t 28.7402 & 7.384544e+13 & 1.639424e+15 & 0.6232188\\\\\n",
       "\t 32.9868 & 1.213142e+14 & 1.760738e+15 & 0.6017891\\\\\n",
       "\t 33.4604 & 1.303750e+14 & 1.891113e+15 & 0.5795797\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 521 × 4\n",
       "\n",
       "| time &lt;dbl&gt; | haz &lt;dbl&gt; | cumhaz &lt;dbl&gt; | V4 &lt;dbl&gt; |\n",
       "|---|---|---|---|\n",
       "| 0.1722 | 6.884384e+11 | 6.884384e+11 | 0.9998015 |\n",
       "| 0.1875 | 6.893582e+11 | 1.377797e+12 | 0.9996027 |\n",
       "| 0.1937 | 6.949328e+11 | 2.072729e+12 | 0.9994023 |\n",
       "| 0.2062 | 1.390223e+12 | 3.462953e+12 | 0.9990017 |\n",
       "| 0.2256 | 6.965314e+11 | 4.159484e+12 | 0.9988010 |\n",
       "| 0.2340 | 6.976498e+11 | 4.857134e+12 | 0.9986000 |\n",
       "| 0.2375 | 6.979619e+11 | 5.555096e+12 | 0.9983990 |\n",
       "| 0.2430 | 6.992537e+11 | 6.254350e+12 | 0.9981977 |\n",
       "| 0.2486 | 7.002644e+11 | 6.954614e+12 | 0.9979961 |\n",
       "| 0.2576 | 7.005927e+11 | 7.655207e+12 | 0.9977945 |\n",
       "| 0.2763 | 7.006340e+11 | 8.355841e+12 | 0.9975928 |\n",
       "| 0.2833 | 7.008006e+11 | 9.056641e+12 | 0.9973912 |\n",
       "| 0.3090 | 7.018442e+11 | 9.758485e+12 | 0.9971893 |\n",
       "| 0.3145 | 7.027860e+11 | 1.046127e+13 | 0.9969872 |\n",
       "| 0.3208 | 7.040796e+11 | 1.116535e+13 | 0.9967848 |\n",
       "| 0.3645 | 1.414928e+12 | 1.258028e+13 | 0.9963781 |\n",
       "| 0.3673 | 7.084251e+11 | 1.328870e+13 | 0.9961745 |\n",
       "| 0.3701 | 7.086055e+11 | 1.399731e+13 | 0.9959709 |\n",
       "| 0.3715 | 7.091177e+11 | 1.470643e+13 | 0.9957672 |\n",
       "| 0.3729 | 7.119634e+11 | 1.541839e+13 | 0.9955628 |\n",
       "| 0.3777 | 7.160444e+11 | 1.613444e+13 | 0.9953572 |\n",
       "| 0.3812 | 7.172771e+11 | 1.685171e+13 | 0.9951513 |\n",
       "| 0.3965 | 7.181414e+11 | 1.756985e+13 | 0.9949452 |\n",
       "| 0.4201 | 7.183837e+11 | 1.828824e+13 | 0.9947390 |\n",
       "| 0.4243 | 7.185207e+11 | 1.900676e+13 | 0.9945329 |\n",
       "| 0.4395 | 7.200428e+11 | 1.972680e+13 | 0.9943264 |\n",
       "| 0.4409 | 7.218036e+11 | 2.044860e+13 | 0.9941194 |\n",
       "| 0.4513 | 7.225986e+11 | 2.117120e+13 | 0.9939122 |\n",
       "| 0.4520 | 7.242014e+11 | 2.189540e+13 | 0.9937046 |\n",
       "| 0.4597 | 7.249036e+11 | 2.262031e+13 | 0.9934969 |\n",
       "| ⋮ | ⋮ | ⋮ | ⋮ |\n",
       "| 15.1402 | 1.078935e+13 | 9.860861e+14 | 0.7524536 |\n",
       "| 15.2659 | 1.090912e+13 | 9.969952e+14 | 0.7500897 |\n",
       "| 15.4138 | 1.102090e+13 | 1.008016e+15 | 0.7477091 |\n",
       "| 16.2597 | 1.215347e+13 | 1.020170e+15 | 0.7450927 |\n",
       "| 17.2062 | 1.337248e+13 | 1.033542e+15 | 0.7422244 |\n",
       "| 17.4125 | 1.357526e+13 | 1.047117e+15 | 0.7393239 |\n",
       "| 17.8541 | 1.526836e+13 | 1.062386e+15 | 0.7360752 |\n",
       "| 18.3347 | 1.614617e+13 | 1.078532e+15 | 0.7326552 |\n",
       "| 18.4493 | 1.616600e+13 | 1.094698e+15 | 0.7292470 |\n",
       "| 18.6638 | 1.730981e+13 | 1.112008e+15 | 0.7256152 |\n",
       "| 18.7069 | 1.750403e+13 | 1.129512e+15 | 0.7219610 |\n",
       "| 19.1194 | 1.820351e+13 | 1.147715e+15 | 0.7181803 |\n",
       "| 19.8458 | 1.983117e+13 | 1.167546e+15 | 0.7140842 |\n",
       "| 20.0812 | 2.049940e+13 | 1.188046e+15 | 0.7098745 |\n",
       "| 20.1194 | 2.084786e+13 | 1.208894e+15 | 0.7056187 |\n",
       "| 20.1979 | 2.088100e+13 | 1.229775e+15 | 0.7013818 |\n",
       "| 20.6458 | 2.169132e+13 | 1.251466e+15 | 0.6970074 |\n",
       "| 20.6840 | 2.178611e+13 | 1.273252e+15 | 0.6926413 |\n",
       "| 20.7777 | 2.208560e+13 | 1.295338e+15 | 0.6882431 |\n",
       "| 20.9750 | 2.247651e+13 | 1.317814e+15 | 0.6837957 |\n",
       "| 21.2902 | 2.282366e+13 | 1.340638e+15 | 0.6793091 |\n",
       "| 21.3534 | 2.295308e+13 | 1.363591e+15 | 0.6748267 |\n",
       "| 22.0375 | 2.546556e+13 | 1.389056e+15 | 0.6698882 |\n",
       "| 22.9368 | 2.703522e+13 | 1.416092e+15 | 0.6646849 |\n",
       "| 25.9909 | 4.343033e+13 | 1.459522e+15 | 0.6564106 |\n",
       "| 27.0520 | 4.909298e+13 | 1.508615e+15 | 0.6471814 |\n",
       "| 27.7284 | 5.696325e+13 | 1.565578e+15 | 0.6366352 |\n",
       "| 28.7402 | 7.384544e+13 | 1.639424e+15 | 0.6232188 |\n",
       "| 32.9868 | 1.213142e+14 | 1.760738e+15 | 0.6017891 |\n",
       "| 33.4604 | 1.303750e+14 | 1.891113e+15 | 0.5795797 |\n",
       "\n"
      ],
      "text/plain": [
       "    time    haz          cumhaz       V4       \n",
       "1   0.1722  6.884384e+11 6.884384e+11 0.9998015\n",
       "2   0.1875  6.893582e+11 1.377797e+12 0.9996027\n",
       "3   0.1937  6.949328e+11 2.072729e+12 0.9994023\n",
       "4   0.2062  1.390223e+12 3.462953e+12 0.9990017\n",
       "5   0.2256  6.965314e+11 4.159484e+12 0.9988010\n",
       "6   0.2340  6.976498e+11 4.857134e+12 0.9986000\n",
       "7   0.2375  6.979619e+11 5.555096e+12 0.9983990\n",
       "8   0.2430  6.992537e+11 6.254350e+12 0.9981977\n",
       "9   0.2486  7.002644e+11 6.954614e+12 0.9979961\n",
       "10  0.2576  7.005927e+11 7.655207e+12 0.9977945\n",
       "11  0.2763  7.006340e+11 8.355841e+12 0.9975928\n",
       "12  0.2833  7.008006e+11 9.056641e+12 0.9973912\n",
       "13  0.3090  7.018442e+11 9.758485e+12 0.9971893\n",
       "14  0.3145  7.027860e+11 1.046127e+13 0.9969872\n",
       "15  0.3208  7.040796e+11 1.116535e+13 0.9967848\n",
       "16  0.3645  1.414928e+12 1.258028e+13 0.9963781\n",
       "17  0.3673  7.084251e+11 1.328870e+13 0.9961745\n",
       "18  0.3701  7.086055e+11 1.399731e+13 0.9959709\n",
       "19  0.3715  7.091177e+11 1.470643e+13 0.9957672\n",
       "20  0.3729  7.119634e+11 1.541839e+13 0.9955628\n",
       "21  0.3777  7.160444e+11 1.613444e+13 0.9953572\n",
       "22  0.3812  7.172771e+11 1.685171e+13 0.9951513\n",
       "23  0.3965  7.181414e+11 1.756985e+13 0.9949452\n",
       "24  0.4201  7.183837e+11 1.828824e+13 0.9947390\n",
       "25  0.4243  7.185207e+11 1.900676e+13 0.9945329\n",
       "26  0.4395  7.200428e+11 1.972680e+13 0.9943264\n",
       "27  0.4409  7.218036e+11 2.044860e+13 0.9941194\n",
       "28  0.4513  7.225986e+11 2.117120e+13 0.9939122\n",
       "29  0.4520  7.242014e+11 2.189540e+13 0.9937046\n",
       "30  0.4597  7.249036e+11 2.262031e+13 0.9934969\n",
       "⋮   ⋮       ⋮            ⋮            ⋮        \n",
       "492 15.1402 1.078935e+13 9.860861e+14 0.7524536\n",
       "493 15.2659 1.090912e+13 9.969952e+14 0.7500897\n",
       "494 15.4138 1.102090e+13 1.008016e+15 0.7477091\n",
       "495 16.2597 1.215347e+13 1.020170e+15 0.7450927\n",
       "496 17.2062 1.337248e+13 1.033542e+15 0.7422244\n",
       "497 17.4125 1.357526e+13 1.047117e+15 0.7393239\n",
       "498 17.8541 1.526836e+13 1.062386e+15 0.7360752\n",
       "499 18.3347 1.614617e+13 1.078532e+15 0.7326552\n",
       "500 18.4493 1.616600e+13 1.094698e+15 0.7292470\n",
       "501 18.6638 1.730981e+13 1.112008e+15 0.7256152\n",
       "502 18.7069 1.750403e+13 1.129512e+15 0.7219610\n",
       "503 19.1194 1.820351e+13 1.147715e+15 0.7181803\n",
       "504 19.8458 1.983117e+13 1.167546e+15 0.7140842\n",
       "505 20.0812 2.049940e+13 1.188046e+15 0.7098745\n",
       "506 20.1194 2.084786e+13 1.208894e+15 0.7056187\n",
       "507 20.1979 2.088100e+13 1.229775e+15 0.7013818\n",
       "508 20.6458 2.169132e+13 1.251466e+15 0.6970074\n",
       "509 20.6840 2.178611e+13 1.273252e+15 0.6926413\n",
       "510 20.7777 2.208560e+13 1.295338e+15 0.6882431\n",
       "511 20.9750 2.247651e+13 1.317814e+15 0.6837957\n",
       "512 21.2902 2.282366e+13 1.340638e+15 0.6793091\n",
       "513 21.3534 2.295308e+13 1.363591e+15 0.6748267\n",
       "514 22.0375 2.546556e+13 1.389056e+15 0.6698882\n",
       "515 22.9368 2.703522e+13 1.416092e+15 0.6646849\n",
       "516 25.9909 4.343033e+13 1.459522e+15 0.6564106\n",
       "517 27.0520 4.909298e+13 1.508615e+15 0.6471814\n",
       "518 27.7284 5.696325e+13 1.565578e+15 0.6366352\n",
       "519 28.7402 7.384544e+13 1.639424e+15 0.6232188\n",
       "520 32.9868 1.213142e+14 1.760738e+15 0.6017891\n",
       "521 33.4604 1.303750e+14 1.891113e+15 0.5795797"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "basesurv_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA0gAAANICAIAAAByhViMAAAACXBIWXMAABJ0AAASdAHeZh94\nAAAgAElEQVR4nOzdZ1wU1xoG8GfZpYM0UUBFASmiglJEwN57jD0Ue68xliSKxhI1duyKihpi\njb3F3hGioqggKqDSEUSQIp29H9ZguSqI6LLr8//dD7MzZ2beuffGPJ6Zc45ALBaDiIiIiGSf\ngrQLICIiIqLywWBHREREJCcY7IiIiIjkBIMdERERkZxgsCMiIiKSEwx2RERERHKCwY6IiIhI\nTjDYEREREckJBjsiIiIiOcFgR0RERCQnGOyIiIiI5ASDHREREZGcYLAjIiIikhMMdkRERERy\ngsGOiIiISE4w2BERERHJCQY7IiIiIjnBYEdEREQkJxjsiIiIiOQEgx0RERGRnGCwIyIiIpIT\nDHZEREREcoLBjoiIiEhOMNgRERERyQkGOyIiIiI5wWBHREREJCcY7IiIiIjkBIMdERERkZxg\nsCMiIiKSEwx2RERERHKCwY6IiIhITjDYEREREckJBjsiIiIiOcFgR0RERCQnGOyIiIiI5ASD\nHREREZGcYLAjIiIikhMMdkRERERygsGOiIiISE4w2BERERHJCQY7IiIiIjnBYEdEREQkJxjs\niIiIiOQEgx0RERGRnGCwIyIiIpITDHZEREREcoLBjoiIiEhOMNgRERERyQkGOyIiIiI5wWBH\nREREJCcY7IiIiIjkBIMdERERkZxgsCMiIiKSEwx2RERERHKCwY6IiIhITjDYEREREckJBjsi\nIiIiOcFgR0RERCQnGOyIiIiI5ASDHREREZGcYLAjIiIikhMMdkRERERygsGOiIiISE4w2BER\nERHJCQY7IiIiIjnBYEdEREQkJxjsiIiIiOQEgx0RERGRnGCwIyIiIpITDHZEREREcoLBjoiI\niEhOMNgRERERyQkGOyIiIiI5wWBHREREJCcY7IiIiIjkBIMdERERkZxgsCMiIiKSEwx2RERE\nRHKCwY6IiIhITjDYEREREckJBjsiIiIiOcFgR0RERCQnGOyIiIiI5ASDHREREZGcYLAjIiIi\nkhMMdkRERERygsGOiIiISE4w2BERERHJCQY7IiIiIjnBYEdEREQkJxjsiIiIiOQEgx0RERGR\nnGCwIyIiIpITDHZEREREcoLBjoiIiEhOMNgRERERyQmRtAuQDbdv3y4oKJB2FURERFQhiEQi\n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\nUlBQyMrKUlFVXfvXX7/++uu6ffuapaUljR//g4HBPH9/LFmScvTo06dPpV0pERERfT0MdjKs\nV69epqamBw8enDVr1vHjxx9ERDjdvv3k0CGsWoVNmyb/9ls9E5Pw8HBpl0lERERfCYOdDFuz\nZk3jxo1/+OGHRYsWtWjRIvjGDVFGht3mzcfDw7Fy5coLFwyrVLFv2PDw4cPSrpSIiIi+BgY7\nGWZqarpz584ZM2Z4eXk9f/68uqnp9ceP25qY9Nq69fzjx5orVgTevNmmXbvvv/8+ODhY2sUS\nERHRF8dgJ9uEQqGXl9fWrVu1tLQAaFeu/Of1612srDpu2xZQqZLaiBF7tm+/cuVKvXr1pF0p\nERERfXEMdjJPSUnJzc1NKBQ+ffp02LBhOTk5ftev21lYdJgxY03NmqJ+/ZzNzEQiUcbGjS+4\nOgUREZFcY7CTH4qKigcOHGjbtm18fPxxf/8hQ4aMXbp0s4sLBg/Go0eePj5VKldePHBgdFiY\ntCslIiKiL4LBTn7o6ur+888/mZmZXbp0EYvFy5YtGzdu3LBff51Vp454woQ/T58ePGjQ7F27\nzOvVO7pkibSLJSIiovLHYCdXHB0dDx06lJaWJllYbOXKlTPHjp27dOlkZWXNZcvWbdqUnJo6\nZMiQwHv3pF0pERERlT+RtAugcmZubh4aGqqpqSn5OWvlSo2cnCkbN3ZWV281dKjq0qVrfXyk\nWyERERF9Ieyxk0Pa2tpCoTAxMXHkyJHZ2dmTfXyaGxuPvXSpcPx4TJqE0aORl1dQUNC0adPZ\ns2fn5+dLu14iIiIqHwx2cksoFG7fvt3d3f3ly5frjxx5GBVVu2vX8+7u8PREz56i1FQ7O7s/\n5s1bOWSItCslIiKi8sFgJ7f09fV37dp1+vTp3r171zQ3v3bkSGU9vVatWtUdOjR2+nSMGLHC\n2/vnX3+dsXPnuUGDkJUl7XqJiIjoczHYybPOnTtv377d39//yJEjdp07B16/fu7cuZycHJtO\nnQJdXDBhwvSpU3u7uZ0TCODhgQMHpF0vERERfRYGOznXrVu38PDwHj16ABAKhS1btgwMDKxr\nbNxt3rxEJyfFvn23rVv3u68vdu9Oy8zs06dPcnKytEsmIiKiMmKwk3/6+voikejNn8fOni16\n+XKon1/hzz9jwQIAUFJS6tnz5MmT33333YkTJ8RisdTKJSIiorJisPtWODg4NG/ePDIyEkAl\n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\nUx+WiIhkkWz02KWnpzs7O9+7d0/yUygUHjx4cOvWrfv372/dunXt2rVDQkKuXLmiq6t7//59\n/fL+dxh77Ehi5cqVs2bNApCXl6eurh4TE6P09qwlpTG9ceP5//4LYNeuXX379v1Y05AQnD2L\nmzdRVISaNdG9OxwcSqwwLS1t5syZkp+Ojo43btwwNjZeunRphw4dNDQ0cOoUDAxQqxaHXBAR\nlVlF7rGDWBZMnjwZwLRp06Kjo2/cuGFnZ6ekpCQQCA4fPlzcZtOmTQDGjBlT7ndfv349gIyM\njHK/MsmomJiYVatWFRUVicXivLy83NzcTzj5xYu8yZMbW1gA+OGHH0p7VlSUuGdPcULCJ9V5\n//79bdu21a5dWyQSLVy4UCwWiw8eFC9bJh4/XtyypTgu7pOuRkREErm5uQD8/f2lXch7yEaP\nnbW1tbq6evH0rTdu3HB0dOzUqdOxY8febObg4JCXl3fnzp3yvTt77OgjnJ2dIyMjJ02aBEBX\nV3fYsGGlOSstLW3JkiULFy6UvM9t2rTp8uXLSzgnPh5Tp6JaNfTpAzs7CASlL3LSpEnq6upz\n5syR/HRycrp+/fqxrl07HjpU+osQEZFERe6xk41v7KKiol6PJQTq1q0LwNLS8p1mderUOXDg\nwFetjL55a9euHT169N9//52bmxsSEtKxY8fq1auXeJa2tvbPP/+sq6ubn59/+/hxb2/v9PT0\natWqTZs2TUVF5f3nGBnhr7/w+DH27cPSpbC1xdSppYx3S5cuffPnnj17unbtOiUyUjsgwNnZ\n+dXeLVtQrRoaN+ZbWiIi2SUbwc7Y2Lj4AzsAkjGADx48eKfZw4cPTUs9HxhRuWjYsGFAQACA\ngoKCAwcOGBgYAIiLi5s3b17Hjh27du36oRM1NTV/+uknALCz0xk+PP7ePV9f36SkpNatW0sa\nODs7vycjmphg8mQAOHwYffpgwQLUrv2pNdesWXPevHljxoxp3779tWvXrKysADyzsYk6dkx5\nzpx6hw/ji40xJyKiL0va74JLRfLvPy8vr5iYGMk3diKRSCAQHD16tLiNr68vgLFjx5b73fmN\nHX2q6OhoyaDX5s2b79mzJywsrIQTXrwQ+/mNMjbWqVRJR0dHR0dHSUnJ3Ny8d+/ekydP/uBZ\nz5+L3dzKXOT9+/cPHjyYn58v+Tly5EjJnwkXXFzEx46V+bJERHKP39h9rrS0NCcnp4cPH0p+\n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\nrq7Wuiin8KhgR1PZPWqJWnJT5ebm1nO55vLly+phLbmLGrlELbmLVAcPHkxISGjVqpW3t3ef\nPn3S09PLy8sdD2jJXeRsDMpDnwkFAABAc8TNEwAAADpBsAMAANAJgh0AAIBOEOwAAAB0gmAH\nAACgEwQ7AAAAnSDYAQAA6ATBDgAAQCcIdgAAADpBsAMAANAJgh0AAIBOEOwAAAB0gmAHAACg\nEwQ7AAAAnSDYAQAA6ATBDgAAQCcIdgAAADpBsAMAANAJgh0AAIBOEOwAAAB0gmAHAACgEwQ7\nAAAAnSDYAQAA6ATBDgAAQCcIdgAAADpBsAMAANAJgh0AAIBOEOwAAAB0gmAHAACgEwQ7AAAA\nnSDYAQAA6ATBDgAAQCcIdgAeX+vWrePi4rSuoiVKTk42GAxVVVUiMmrUKMN/Pd7ZNmzYEBgY\n6DiSnp5uP+epU6eeQsUAmgTBDgCepl27dhkMhi+//PIXnVKLp6fnypUrV65c+Rhza2pqsrKy\nag0mJCSsXLlyxIgRj10SAE24al0AAOBJeXp6Llmy5OfOunHjxsmTJ9esWXPs2DGTyeS464UX\nXnjhhResVuu333779MoE8Isj2AFACxUREWE2m7WuAsDTxKVYAE/q/PnzkyZNCg0N7dix49ix\nY8+dO+e499KlS0lJSd26dfPy8goNDR03btyJEyfsexVF+fzzzwcOHGgymYKDg4cNG7Znzx7H\n6TU1NX/84x8HDRrk6+sbGhqampp6/vz5Rk4fM2aMn59frbMZDIbk5GR1c9q0aa1bt1YU5e23\n3/b39//444+nTp1qMBiOHDniOGv79u0Gg+Gdd95pcClGjRo1evRoEUlKSjIYDKWlpep4RUXF\n3Llzo6Oj/fz8+vfv/84771gslvqn1L9uT8XWrVtzcnJycnI6d+78dM8MQDMKADyu4ODgyMjI\noKCg0NDQiRMnxsTEiIi3t/eBAwfUA86cOePl5eXq6pqQkJCamtq7d2+j0RgQEFBcXKwe8Lvf\n/U5EAgMDX3nllRdffNHDw8NoNO7fv1/dW11dPXToUBEZPHjw9OnTX3rpJaPR6Ovre+TIkcZM\nHz16tK+vr2PBVqtVRJKSktTN1NTU4ODg3//+9yISFha2devWv//97yKyaNEix1kTJ04UkcLC\nwgYXZO/evfPnzxeRmTNnbtq0yWKxKIpy48YNNTn169cvOTm5Z8+eItKzZ8+KiopHTWlw3ZKS\nkkTEbDYrihIfH28ymX7mP93/6NOnT51nWLFihYgUFBQ8yckBNCWCHYDHFxwcLCIjR46sqqpS\nRzZv3iwizz33nM1mUxRl3rx5IrJjxw77lI8++khENm3apG62atWqc+fO9umHDx8WkdTUVHXz\nww8/dHV13bVrl316Xl6ej49P9+7dGzO9McHOxcXF39//+++/V0eqq6sDAgK6dOlin3L37l1f\nX9/nnnuukWuyc+dOEfniiy/sI7NmzRKRVatWqZs2m23RokUisnz58kdNaXDdCHYA6sSlWABP\nxGg0ZmZment7q5spKSnx8fE//PDD6dOnReQ3v/nNF198MWbMGPvxkZGRIlJeXi4iVqv1zp07\niqK4ubmpe2NjYwsKCpYtW6ZuZmRkDBkypEePHlf+q127dvHx8efOnbty5UqD0xujpqbmD3/4\ng/peo4i4u7snJib+61//KiwsVEd2795tNpvtV29/rgcPHnz22Wc9evRIT09XRwwGw4oVK9q1\na/fJJ588alb96wYAj8LNEwCeSOfOncPDwx1HEhIS9uzZU1RUFB0drV5IFZHbt2+fOnUqLy8v\nOzvbfqSrq+uECRO2bt0aGRk5derUuLi4/v37R0dHq3vNZnNxcXFxcfEzzzzz8J9748aNsLCw\neqY33pAhQxw3X3311ezs7JycHPWa6bZt21xdXV977bWfe1rVlStXHjx48OKLLzo+ZM7DwyM2\nNvavf/1rZWVlrU8BqupfNwB4FN6xA/BE2rdvX2ukY8eOInLz5k0R+c9//vP666+HhYW1atXq\n5Zdf/sc//tG7d2/Hgzdv3pyRkeHv7798+fLBgwe3bt369ddfV+devXpVRBISEnLq0qVLl/qn\n10lRlIcHw8LCHDfj4uICAgJycnJE5N69ezt37hwxScUI+wAABRtJREFUYkTbtm0fa3nkp59+\nEpGHp6vrVlxcXOesBtcNAOrEO3YAnkhJSUmdI+rbbOPGjTt8+PCsWbMmTpw4ZMgQo9H4/fff\nf/311/aD3dzcFixYsGDBguvXrx84cGDLli0bN248fvx4QUGBGn38/PwSExMf9afXM73Or2Gw\n33PqyNX1f34Turu7v/LKK5s3by4uLj5+/LjZbE5JSWn8gtTSoUMH+W/MdaSOPByLVQ2uGwDU\niXfsADyRS5cuFRUVOY7s3r1bRKKiom7cuHHo0KGxY8d+/PHHQ4cONRqNIuL44LSioqL09PRd\nu3aJSEhIyGuvvfbNN9/Ex8efPn36ypUrgYGBwcHB+/btq66udjx/nz59IiIiGpyuHnz//n3H\nd+ny8/Mb85eaMGGCiOTk5Gzbts3f3//ll19+nKUREZGwsDA3Nzf1Rl37YHV19dGjR4ODg2t9\nkZeqwXUDgEch2AF4Ijab7c0337x37566mZ2dvXPnzl//+tfPPvusp6eniFRWVtoPLi8vf//9\n90WkpqZGRDw8PFavXr148WL7dIvFUlJS4ubmpl67nD17dmlp6dSpU202m3rARx99dOrUKfU9\nvAanBwUF3b9/Pzc3V91bUVGhPh6lQXFxcSaTaevWrTt37pwwYYKXl9fPXRZ7GHVzc5s+ffqZ\nM2cyMjLUEUVRli1bdv369TfeeKPOKQ2uW4MsFsuVK1euX7/+c8sG0OxpeUsugGYuODh4yJAh\n6hN0J02aNHDgQBFp06aN/ZFvI0eOFJGxY8f+6U9/mjdvXtu2bRMSEgwGQ/fu3bdv364oyvjx\n40UkNDR0ypQpycnJ6ufzFi9erE43m83qZ8vUA55//nkR6datW2VlpXpA/dPVz8n5+PikpaW9\n9dZbzz777PDhw8PCwhwfdyIi5eXlD//Vpk6dqv6StD8Vr5G+++47EYmOjn733XfVx5GUlJSo\nF6YHDBiQkpLSq1cvEenRo4f6HLs6pzS4bvU/7mTfvn0iEhUV1ciaedwJoBsEOwCPLzg4+M03\n3zx27Nj48ePbtWv3zDPPTJ482f4QXUVRSktL09LSOnbs6O/vP2zYMPVRbfPnzzeZTDNmzFAU\nxWw2L1++vFu3bj4+PsHBwbGxsdnZ2eoz8FT37t1bunRpv379fHx8unbt+vbbbzvmsAanb968\nuVevXl5eXu3bt58/f35VVVV4eHhjgp16hbdTp06OZ2sMi8WSmJjo6ekZHBx8+/ZtdbC8vHzO\nnDm9evXy8fHp27fv4sWL7969W8+UBteNYAegTgalrnvEAADNxahRo/Ly8srKyhwHS0pKEhIS\nTp48+SRnfv/995ctW1ZQUPAYD5EBoAk+YwcAOpSfn88TUoAWiMedAECjfPrppw1+p0VaWpp6\n+bKJWSyWVatWiciSJUtEJD8/PysrKzMz87FPmJube+zYsYMHDz61EgE0CS7FAkCj3L171/FO\n1Tp5e3vX+U0Sv6hRo0bt2bNH/flp/UpPT09fvXq1+jOXYoFmhGAHAACgE3zGDgAAQCcIdgAA\nADpBsAMAANAJgh0AAIBOEOwAAAB0gmAHAACgEwQ7AAAAnSDYAQAA6ATBDgAAQCcIdgAAADpB\nsAMAANAJgh0AAIBOEOwAAAB0gmAHAACgEwQ7AAAAnSDYAQAA6ATBDgAAQCcIdgAAADpBsAMA\nANAJgh0AAIBOEOwAAAB0gmAHAACgEwQ7AAAAnSDYAQAA6ATBDgAAQCcIdgAAADrxf6CNRYAp\nhArmAAAAAElFTkSuQmCC",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 420,
       "width": 420
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot(basesurv_total[,1], basesurv_total[,(R+2)], type=\"l\", col=\"red\", lty=1, lwd=0.5, xlim=c(0,32.9868), ylim=c(0,1))\n",
    "lines(basesurv_total[,1], basesurv_total[,(R+3)], type=\"l\", col=\"red\", lty=2, lwd=0.5)\n",
    "lines(basesurv_total[,1], basesurv_total[,(R+4)], type=\"l\", col=\"red\",lty=2,  lwd=0.5)\n",
    "lines(surv_central, col=\"black\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "write.csv(basesurv_total, \"/home/jiae/eicu-crd_0731/cox_eICU_H10_jupy/output/feature8_VARwt_basesurv_total.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Call: survfit(formula = central_fit, newdata = c(x1 = 59.91168, x2 = 9.810997, \n",
       "    x3 = 36.20453, x4 = 7.34948, x5 = 41.04722, x6 = 31.10893, \n",
       "    x7 = 1.509144, x8 = 59.0167), conf.int = 0.95)\n",
       "\n",
       "   time n.risk n.event survival  std.err lower 95% CI upper 95% CI\n",
       "  0.172   2910       1    1.000 0.000208        0.999        1.000\n",
       "  0.188   2908       1    1.000 0.000295        0.999        1.000\n",
       "  0.194   2907       1    0.999 0.000362        0.999        1.000\n",
       "  0.206   2906       2    0.999 0.000470        0.998        1.000\n",
       "  0.226   2904       1    0.999 0.000516        0.998        1.000\n",
       "  0.234   2903       1    0.999 0.000558        0.997        1.000\n",
       "  0.237   2902       1    0.998 0.000598        0.997        0.999\n",
       "  0.243   2900       1    0.998 0.000635        0.997        0.999\n",
       "  0.249   2898       1    0.998 0.000671        0.997        0.999\n",
       "  0.258   2897       1    0.998 0.000704        0.996        0.999\n",
       "  0.276   2896       1    0.997 0.000737        0.996        0.999\n",
       "  0.283   2895       1    0.997 0.000768        0.996        0.999\n",
       "  0.309   2894       1    0.997 0.000798        0.995        0.999\n",
       "  0.315   2893       1    0.997 0.000828        0.995        0.998\n",
       "  0.321   2892       1    0.997 0.000856        0.995        0.998\n",
       "  0.364   2889       2    0.996 0.000911        0.994        0.998\n",
       "  0.367   2887       1    0.996 0.000938        0.994        0.998\n",
       "  0.370   2886       1    0.996 0.000964        0.994        0.998\n",
       "  0.371   2885       1    0.996 0.000989        0.994        0.998\n",
       "  0.373   2883       1    0.995 0.001014        0.993        0.997\n",
       "  0.378   2881       1    0.995 0.001039        0.993        0.997\n",
       "  0.381   2880       1    0.995 0.001063        0.993        0.997\n",
       "  0.397   2877       1    0.995 0.001087        0.993        0.997\n",
       "  0.420   2875       1    0.994 0.001111        0.992        0.997\n",
       "  0.424   2874       1    0.994 0.001134        0.992        0.997\n",
       "  0.440   2873       1    0.994 0.001156        0.992        0.996\n",
       "  0.441   2872       1    0.994 0.001179        0.992        0.996\n",
       "  0.451   2871       1    0.994 0.001201        0.991        0.996\n",
       "  0.452   2870       1    0.993 0.001223        0.991        0.996\n",
       "  0.460   2867       1    0.993 0.001245        0.991        0.996\n",
       "  0.483   2862       1    0.993 0.001266        0.990        0.995\n",
       "  0.506   2858       1    0.993 0.001288        0.990        0.995\n",
       "  0.512   2857       1    0.993 0.001309        0.990        0.995\n",
       "  0.515   2856       1    0.992 0.001330        0.990        0.995\n",
       "  0.516   2855       1    0.992 0.001351        0.989        0.995\n",
       "  0.521   2853       1    0.992 0.001371        0.989        0.995\n",
       "  0.539   2849       1    0.992 0.001392        0.989        0.994\n",
       "  0.546   2847       1    0.991 0.001412        0.989        0.994\n",
       "  0.546   2846       1    0.991 0.001433        0.988        0.994\n",
       "  0.553   2845       1    0.991 0.001453        0.988        0.994\n",
       "  0.564   2841       1    0.991 0.001472        0.988        0.994\n",
       "  0.566   2840       1    0.991 0.001492        0.988        0.993\n",
       "  0.583   2838       1    0.990 0.001512        0.987        0.993\n",
       "  0.594   2835       1    0.990 0.001531        0.987        0.993\n",
       "  0.599   2834       1    0.990 0.001550        0.987        0.993\n",
       "  0.617   2830       1    0.990 0.001570        0.987        0.993\n",
       "  0.626   2828       1    0.989 0.001588        0.986        0.993\n",
       "  0.633   2826       1    0.989 0.001607        0.986        0.992\n",
       "  0.657   2820       2    0.989 0.001645        0.986        0.992\n",
       "  0.671   2815       1    0.989 0.001663        0.985        0.992\n",
       "  0.678   2811       1    0.988 0.001681        0.985        0.992\n",
       "  0.679   2810       1    0.988 0.001700        0.985        0.991\n",
       "  0.682   2807       1    0.988 0.001718        0.984        0.991\n",
       "  0.691   2804       1    0.988 0.001736        0.984        0.991\n",
       "  0.692   2803       1    0.987 0.001754        0.984        0.991\n",
       "  0.698   2802       1    0.987 0.001772        0.984        0.991\n",
       "  0.700   2800       1    0.987 0.001790        0.983        0.990\n",
       "  0.721   2793       2    0.986 0.001825        0.983        0.990\n",
       "  0.724   2791       2    0.986 0.001860        0.982        0.990\n",
       "  0.734   2786       1    0.986 0.001877        0.982        0.989\n",
       "  0.737   2784       1    0.986 0.001895        0.982        0.989\n",
       "  0.755   2775       1    0.985 0.001912        0.982        0.989\n",
       "  0.758   2774       1    0.985 0.001929        0.981        0.989\n",
       "  0.769   2771       1    0.985 0.001947        0.981        0.989\n",
       "  0.774   2769       1    0.985 0.001964        0.981        0.988\n",
       "  0.782   2766       1    0.984 0.001981        0.981        0.988\n",
       "  0.795   2759       1    0.984 0.001998        0.980        0.988\n",
       "  0.796   2758       1    0.984 0.002014        0.980        0.988\n",
       "  0.798   2755       1    0.984 0.002031        0.980        0.988\n",
       "  0.812   2744       1    0.983 0.002048        0.979        0.987\n",
       "  0.814   2742       2    0.983 0.002082        0.979        0.987\n",
       "  0.825   2738       1    0.983 0.002099        0.979        0.987\n",
       "  0.842   2730       1    0.983 0.002115        0.978        0.987\n",
       "  0.842   2727       2    0.982 0.002149        0.978        0.986\n",
       "  0.844   2725       1    0.982 0.002165        0.978        0.986\n",
       "  0.847   2724       1    0.982 0.002182        0.977        0.986\n",
       "  0.849   2723       1    0.981 0.002199        0.977        0.986\n",
       "  0.851   2720       1    0.981 0.002215        0.977        0.985\n",
       "  0.855   2719       3    0.980 0.002264        0.976        0.985\n",
       "  0.888   2704       1    0.980 0.002280        0.976        0.985\n",
       "  0.892   2703       1    0.980 0.002297        0.975        0.984\n",
       "  0.895   2702       1    0.980 0.002313        0.975        0.984\n",
       "  0.896   2701       1    0.979 0.002329        0.975        0.984\n",
       "  0.900   2699       1    0.979 0.002345        0.975        0.984\n",
       "  0.937   2686       2    0.979 0.002377        0.974        0.983\n",
       "  0.945   2681       2    0.978 0.002409        0.973        0.983\n",
       "  0.946   2679       1    0.978 0.002425        0.973        0.983\n",
       "  0.947   2678       1    0.978 0.002441        0.973        0.982\n",
       "  0.954   2673       1    0.977 0.002457        0.973        0.982\n",
       "  0.956   2671       1    0.977 0.002473        0.972        0.982\n",
       "  0.961   2669       1    0.977 0.002489        0.972        0.982\n",
       "  0.963   2667       1    0.977 0.002505        0.972        0.982\n",
       "  0.966   2666       1    0.976 0.002521        0.972        0.981\n",
       "  0.967   2665       2    0.976 0.002552        0.971        0.981\n",
       "  0.972   2659       1    0.976 0.002568        0.971        0.981\n",
       "  0.977   2653       1    0.975 0.002584        0.970        0.981\n",
       "  0.986   2650       1    0.975 0.002600        0.970        0.980\n",
       "  0.988   2649       1    0.975 0.002615        0.970        0.980\n",
       "  0.994   2646       2    0.974 0.002647        0.969        0.980\n",
       "  1.007   2638       1    0.974 0.002662        0.969        0.979\n",
       "  1.023   2629       1    0.974 0.002678        0.969        0.979\n",
       "  1.024   2626       1    0.974 0.002694        0.968        0.979\n",
       "  1.031   2623       1    0.973 0.002709        0.968        0.979\n",
       "  1.046   2618       2    0.973 0.002741        0.968        0.978\n",
       "  1.051   2614       1    0.973 0.002756        0.967        0.978\n",
       "  1.056   2612       1    0.972 0.002772        0.967        0.978\n",
       "  1.058   2611       1    0.972 0.002787        0.967        0.978\n",
       "  1.058   2610       1    0.972 0.002803        0.966        0.977\n",
       "  1.068   2604       1    0.972 0.002818        0.966        0.977\n",
       "  1.081   2596       1    0.971 0.002834        0.966        0.977\n",
       "  1.081   2595       2    0.971 0.002865        0.965        0.976\n",
       "  1.085   2593       1    0.971 0.002880        0.965        0.976\n",
       "  1.085   2592       1    0.970 0.002896        0.965        0.976\n",
       "  1.095   2587       1    0.970 0.002911        0.964        0.976\n",
       "  1.097   2582       1    0.970 0.002926        0.964        0.976\n",
       "  1.110   2577       1    0.970 0.002942        0.964        0.975\n",
       "  1.113   2576       1    0.969 0.002957        0.964        0.975\n",
       "  1.114   2574       1    0.969 0.002972        0.963        0.975\n",
       "  1.119   2571       1    0.969 0.002987        0.963        0.975\n",
       "  1.131   2567       1    0.969 0.003003        0.963        0.974\n",
       "  1.142   2562       1    0.968 0.003018        0.962        0.974\n",
       "  1.144   2559       1    0.968 0.003033        0.962        0.974\n",
       "  1.153   2555       1    0.968 0.003049        0.962        0.974\n",
       "  1.171   2552       1    0.967 0.003064        0.961        0.973\n",
       "  1.178   2549       1    0.967 0.003079        0.961        0.973\n",
       "  1.186   2547       1    0.967 0.003094        0.961        0.973\n",
       "  1.191   2546       1    0.967 0.003110        0.961        0.973\n",
       "  1.197   2541       1    0.966 0.003125        0.960        0.973\n",
       "  1.201   2538       1    0.966 0.003140        0.960        0.972\n",
       "  1.202   2537       1    0.966 0.003155        0.960        0.972\n",
       "  1.203   2536       1    0.966 0.003170        0.959        0.972\n",
       "  1.204   2535       1    0.965 0.003185        0.959        0.972\n",
       "  1.208   2533       1    0.965 0.003200        0.959        0.971\n",
       "  1.216   2529       1    0.965 0.003215        0.958        0.971\n",
       "  1.226   2525       1    0.965 0.003230        0.958        0.971\n",
       "  1.236   2521       1    0.964 0.003245        0.958        0.971\n",
       "  1.240   2517       1    0.964 0.003260        0.958        0.970\n",
       "  1.246   2513       1    0.964 0.003275        0.957        0.970\n",
       "  1.250   2509       1    0.963 0.003290        0.957        0.970\n",
       "  1.251   2508       1    0.963 0.003305        0.957        0.970\n",
       "  1.268   2502       1    0.963 0.003320        0.956        0.969\n",
       "  1.275   2499       1    0.963 0.003335        0.956        0.969\n",
       "  1.285   2495       1    0.962 0.003350        0.956        0.969\n",
       "  1.309   2489       1    0.962 0.003365        0.955        0.969\n",
       "  1.324   2481       1    0.962 0.003379        0.955        0.968\n",
       "  1.345   2474       1    0.961 0.003394        0.955        0.968\n",
       "  1.347   2472       1    0.961 0.003409        0.955        0.968\n",
       "  1.354   2471       1    0.961 0.003424        0.954        0.968\n",
       "  1.378   2461       1    0.961 0.003439        0.954        0.967\n",
       "  1.381   2456       1    0.960 0.003454        0.954        0.967\n",
       "  1.391   2454       1    0.960 0.003469        0.953        0.967\n",
       "  1.399   2453       1    0.960 0.003484        0.953        0.967\n",
       "  1.410   2448       1    0.960 0.003498        0.953        0.966\n",
       "  1.411   2446       1    0.959 0.003513        0.952        0.966\n",
       "  1.413   2443       1    0.959 0.003528        0.952        0.966\n",
       "  1.438   2436       1    0.959 0.003543        0.952        0.966\n",
       "  1.462   2422       1    0.958 0.003557        0.951        0.965\n",
       "  1.467   2420       1    0.958 0.003572        0.951        0.965\n",
       "  1.475   2414       1    0.958 0.003587        0.951        0.965\n",
       "  1.481   2411       1    0.958 0.003602        0.951        0.965\n",
       "  1.503   2405       1    0.957 0.003617        0.950        0.964\n",
       "  1.508   2403       1    0.957 0.003632        0.950        0.964\n",
       "  1.509   2402       1    0.957 0.003647        0.950        0.964\n",
       "  1.531   2394       1    0.956 0.003662        0.949        0.964\n",
       "  1.533   2392       1    0.956 0.003677        0.949        0.963\n",
       "  1.549   2383       1    0.956 0.003691        0.949        0.963\n",
       "  1.556   2379       1    0.956 0.003706        0.948        0.963\n",
       "  1.572   2371       1    0.955 0.003721        0.948        0.963\n",
       "  1.578   2366       1    0.955 0.003736        0.948        0.962\n",
       "  1.587   2360       2    0.954 0.003766        0.947        0.962\n",
       "  1.603   2351       1    0.954 0.003781        0.947        0.962\n",
       "  1.621   2344       1    0.954 0.003796        0.946        0.961\n",
       "  1.630   2336       1    0.954 0.003811        0.946        0.961\n",
       "  1.646   2326       1    0.953 0.003826        0.946        0.961\n",
       "  1.653   2324       1    0.953 0.003840        0.945        0.961\n",
       "  1.656   2319       1    0.953 0.003855        0.945        0.960\n",
       "  1.663   2316       1    0.952 0.003870        0.945        0.960\n",
       "  1.677   2306       1    0.952 0.003885        0.944        0.960\n",
       "  1.684   2303       1    0.952 0.003900        0.944        0.959\n",
       "  1.690   2297       1    0.951 0.003915        0.944        0.959\n",
       "  1.701   2294       1    0.951 0.003930        0.944        0.959\n",
       "  1.708   2287       1    0.951 0.003945        0.943        0.959\n",
       "  1.722   2279       1    0.951 0.003960        0.943        0.958\n",
       "  1.722   2277       1    0.950 0.003975        0.943        0.958\n",
       "  1.739   2271       1    0.950 0.003990        0.942        0.958\n",
       "  1.741   2267       1    0.950 0.004005        0.942        0.958\n",
       "  1.748   2260       1    0.949 0.004020        0.942        0.957\n",
       "  1.749   2259       1    0.949 0.004035        0.941        0.957\n",
       "  1.762   2249       1    0.949 0.004050        0.941        0.957\n",
       "  1.782   2231       1    0.949 0.004065        0.941        0.957\n",
       "  1.794   2218       1    0.948 0.004080        0.940        0.956\n",
       "  1.812   2209       1    0.948 0.004095        0.940        0.956\n",
       "  1.817   2204       1    0.948 0.004111        0.940        0.956\n",
       "  1.831   2195       1    0.947 0.004126        0.939        0.955\n",
       "  1.833   2190       1    0.947 0.004141        0.939        0.955\n",
       "  1.839   2184       1    0.947 0.004157        0.939        0.955\n",
       "  1.844   2179       1    0.946 0.004172        0.938        0.955\n",
       "  1.858   2167       1    0.946 0.004187        0.938        0.954\n",
       "  1.874   2151       1    0.946 0.004203        0.938        0.954\n",
       "  1.878   2147       1    0.945 0.004218        0.937        0.954\n",
       "  1.896   2133       1    0.945 0.004234        0.937        0.953\n",
       "  1.903   2125       1    0.945 0.004250        0.937        0.953\n",
       "  1.912   2121       2    0.944 0.004281        0.936        0.953\n",
       "  1.934   2103       1    0.944 0.004297        0.935        0.952\n",
       "  1.944   2091       1    0.944 0.004313        0.935        0.952\n",
       "  1.947   2088       1    0.943 0.004329        0.935        0.952\n",
       "  1.962   2079       1    0.943 0.004345        0.934        0.951\n",
       "  1.962   2078       1    0.943 0.004360        0.934        0.951\n",
       "  1.983   2066       1    0.942 0.004376        0.934        0.951\n",
       "  1.985   2064       1    0.942 0.004392        0.933        0.951\n",
       "  1.990   2060       1    0.942 0.004408        0.933        0.950\n",
       "  1.991   2059       1    0.941 0.004424        0.933        0.950\n",
       "  2.001   2056       2    0.941 0.004456        0.932        0.949\n",
       "  2.015   2050       1    0.940 0.004472        0.932        0.949\n",
       "  2.018   2045       1    0.940 0.004488        0.931        0.949\n",
       "  2.023   2043       1    0.940 0.004503        0.931        0.949\n",
       "  2.030   2039       1    0.939 0.004519        0.931        0.948\n",
       "  2.035   2035       2    0.939 0.004551        0.930        0.948\n",
       "  2.045   2025       1    0.938 0.004567        0.930        0.947\n",
       "  2.072   2012       1    0.938 0.004583        0.929        0.947\n",
       "  2.096   1998       1    0.938 0.004599        0.929        0.947\n",
       "  2.104   1995       1    0.937 0.004615        0.928        0.947\n",
       "  2.105   1993       1    0.937 0.004631        0.928        0.946\n",
       "  2.128   1986       1    0.937 0.004648        0.928        0.946\n",
       "  2.164   1972       1    0.936 0.004664        0.927        0.946\n",
       "  2.188   1965       1    0.936 0.004680        0.927        0.945\n",
       "  2.191   1963       1    0.936 0.004696        0.927        0.945\n",
       "  2.205   1953       1    0.935 0.004713        0.926        0.945\n",
       "  2.212   1950       1    0.935 0.004729        0.926        0.944\n",
       "  2.226   1947       1    0.935 0.004745        0.926        0.944\n",
       "  2.250   1933       1    0.934 0.004762        0.925        0.944\n",
       "  2.253   1930       1    0.934 0.004778        0.925        0.944\n",
       "  2.262   1929       1    0.934 0.004794        0.924        0.943\n",
       "  2.266   1927       1    0.933 0.004811        0.924        0.943\n",
       "  2.281   1924       1    0.933 0.004827        0.924        0.943\n",
       "  2.289   1922       1    0.933 0.004843        0.923        0.942\n",
       "  2.299   1917       1    0.932 0.004860        0.923        0.942\n",
       "  2.301   1915       1    0.932 0.004876        0.923        0.942\n",
       "  2.302   1913       1    0.932 0.004892        0.922        0.941\n",
       "  2.309   1907       1    0.931 0.004909        0.922        0.941\n",
       "  2.319   1900       1    0.931 0.004925        0.921        0.941\n",
       "  2.335   1894       1    0.931 0.004941        0.921        0.940\n",
       "  2.342   1890       1    0.930 0.004958        0.921        0.940\n",
       "  2.349   1889       1    0.930 0.004974        0.920        0.940\n",
       "  2.351   1887       1    0.930 0.004991        0.920        0.939\n",
       "  2.386   1872       1    0.929 0.005007        0.920        0.939\n",
       "  2.401   1866       1    0.929 0.005024        0.919        0.939\n",
       "  2.404   1865       1    0.929 0.005040        0.919        0.939\n",
       "  2.410   1863       1    0.928 0.005057        0.918        0.938\n",
       "  2.417   1861       1    0.928 0.005073        0.918        0.938\n",
       "  2.420   1858       1    0.928 0.005090        0.918        0.938\n",
       "  2.425   1855       1    0.927 0.005106        0.917        0.937\n",
       "  2.437   1850       1    0.927 0.005123        0.917        0.937\n",
       "  2.440   1848       1    0.927 0.005139        0.917        0.937\n",
       "  2.446   1846       1    0.926 0.005156        0.916        0.936\n",
       "  2.455   1845       1    0.926 0.005172        0.916        0.936\n",
       "  2.466   1842       1    0.925 0.005189        0.915        0.936\n",
       "  2.492   1831       1    0.925 0.005205        0.915        0.935\n",
       "  2.512   1827       1    0.925 0.005222        0.915        0.935\n",
       "  2.526   1824       1    0.924 0.005239        0.914        0.935\n",
       "  2.538   1819       1    0.924 0.005255        0.914        0.934\n",
       "  2.571   1811       1    0.924 0.005272        0.913        0.934\n",
       "  2.573   1810       1    0.923 0.005289        0.913        0.934\n",
       "  2.583   1808       1    0.923 0.005305        0.913        0.933\n",
       "  2.587   1803       1    0.923 0.005322        0.912        0.933\n",
       "  2.630   1790       1    0.922 0.005339        0.912        0.933\n",
       "  2.654   1781       1    0.922 0.005356        0.911        0.932\n",
       "  2.663   1777       2    0.921 0.005390        0.911        0.932\n",
       "  2.664   1773       1    0.921 0.005407        0.910        0.931\n",
       "  2.687   1765       1    0.920 0.005424        0.910        0.931\n",
       "  2.696   1756       1    0.920 0.005441        0.909        0.931\n",
       "  2.699   1752       1    0.920 0.005459        0.909        0.930\n",
       "  2.740   1738       1    0.919 0.005476        0.909        0.930\n",
       "  2.764   1724       1    0.919 0.005493        0.908        0.930\n",
       "  2.767   1721       1    0.919 0.005511        0.908        0.929\n",
       "  2.767   1720       1    0.918 0.005528        0.907        0.929\n",
       "  2.778   1713       1    0.918 0.005545        0.907        0.929\n",
       "  2.784   1709       1    0.917 0.005563        0.907        0.928\n",
       "  2.787   1707       1    0.917 0.005580        0.906        0.928\n",
       "  2.799   1702       1    0.917 0.005597        0.906        0.928\n",
       "  2.816   1696       1    0.916 0.005615        0.905        0.927\n",
       "  2.851   1678       1    0.916 0.005633        0.905        0.927\n",
       "  2.882   1661       1    0.916 0.005651        0.905        0.927\n",
       "  2.897   1651       1    0.915 0.005669        0.904        0.926\n",
       "  2.933   1628       1    0.915 0.005687        0.904        0.926\n",
       "  2.942   1625       1    0.914 0.005705        0.903        0.926\n",
       "  2.946   1621       1    0.914 0.005724        0.903        0.925\n",
       "  2.948   1620       1    0.914 0.005742        0.902        0.925\n",
       "  2.974   1612       1    0.913 0.005761        0.902        0.925\n",
       "  3.026   1593       1    0.913 0.005779        0.902        0.924\n",
       "  3.028   1592       1    0.912 0.005798        0.901        0.924\n",
       "  3.036   1590       1    0.912 0.005817        0.901        0.923\n",
       "  3.074   1576       1    0.912 0.005836        0.900        0.923\n",
       "  3.080   1573       1    0.911 0.005855        0.900        0.923\n",
       "  3.104   1568       1    0.911 0.005874        0.899        0.922\n",
       "  3.108   1567       1    0.910 0.005893        0.899        0.922\n",
       "  3.110   1566       1    0.910 0.005912        0.898        0.922\n",
       "  3.120   1561       1    0.910 0.005931        0.898        0.921\n",
       "  3.141   1554       1    0.909 0.005950        0.898        0.921\n",
       "  3.142   1553       1    0.909 0.005969        0.897        0.921\n",
       "  3.149   1550       1    0.908 0.005988        0.897        0.920\n",
       "  3.180   1539       1    0.908 0.006008        0.896        0.920\n",
       "  3.191   1532       1    0.908 0.006027        0.896        0.919\n",
       "  3.194   1531       1    0.907 0.006046        0.895        0.919\n",
       "  3.201   1528       1    0.907 0.006065        0.895        0.919\n",
       "  3.218   1524       1    0.906 0.006084        0.894        0.918\n",
       "  3.226   1521       1    0.906 0.006104        0.894        0.918\n",
       "  3.240   1515       1    0.905 0.006123        0.894        0.918\n",
       "  3.257   1510       1    0.905 0.006142        0.893        0.917\n",
       "  3.322   1495       1    0.905 0.006162        0.893        0.917\n",
       "  3.374   1485       1    0.904 0.006181        0.892        0.916\n",
       "  3.438   1467       1    0.904 0.006201        0.892        0.916\n",
       "  3.440   1465       1    0.903 0.006221        0.891        0.916\n",
       "  3.461   1461       1    0.903 0.006241        0.891        0.915\n",
       "  3.465   1459       1    0.903 0.006261        0.890        0.915\n",
       "  3.489   1454       1    0.902 0.006282        0.890        0.914\n",
       "  3.514   1450       1    0.902 0.006302        0.889        0.914\n",
       "  3.558   1438       1    0.901 0.006322        0.889        0.914\n",
       "  3.558   1437       1    0.901 0.006342        0.888        0.913\n",
       "  3.575   1428       1    0.900 0.006363        0.888        0.913\n",
       "  3.580   1426       1    0.900 0.006384        0.887        0.913\n",
       "  3.611   1419       1    0.899 0.006404        0.887        0.912\n",
       "  3.612   1418       1    0.899 0.006425        0.887        0.912\n",
       "  3.634   1409       1    0.899 0.006445        0.886        0.911\n",
       "  3.675   1397       1    0.898 0.006466        0.886        0.911\n",
       "  3.683   1394       1    0.898 0.006487        0.885        0.911\n",
       "  3.691   1389       1    0.897 0.006508        0.885        0.910\n",
       "  3.777   1367       1    0.897 0.006529        0.884        0.910\n",
       "  3.796   1358       1    0.896 0.006551        0.884        0.909\n",
       "  3.911   1321       1    0.896 0.006573        0.883        0.909\n",
       "  3.937   1312       1    0.895 0.006595        0.883        0.908\n",
       "  3.997   1291       1    0.895 0.006618        0.882        0.908\n",
       "  4.033   1280       1    0.894 0.006641        0.882        0.908\n",
       "  4.041   1277       1    0.894 0.006664        0.881        0.907\n",
       "  4.043   1276       1    0.894 0.006687        0.880        0.907\n",
       "  4.138   1256       1    0.893 0.006711        0.880        0.906\n",
       "  4.167   1244       1    0.893 0.006735        0.879        0.906\n",
       "  4.348   1215       1    0.892 0.006759        0.879        0.905\n",
       "  4.349   1213       1    0.892 0.006784        0.878        0.905\n",
       "  4.352   1212       1    0.891 0.006808        0.878        0.904\n",
       "  4.371   1206       1    0.891 0.006833        0.877        0.904\n",
       "  4.421   1200       1    0.890 0.006858        0.877        0.904\n",
       "  4.429   1199       1    0.890 0.006883        0.876        0.903\n",
       "  4.430   1198       1    0.889 0.006908        0.876        0.903\n",
       "  4.436   1196       1    0.888 0.006932        0.875        0.902\n",
       "  4.447   1192       1    0.888 0.006957        0.874        0.902\n",
       "  4.493   1181       1    0.887 0.006982        0.874        0.901\n",
       "  4.494   1179       1    0.887 0.007007        0.873        0.901\n",
       "  4.509   1174       1    0.886 0.007032        0.873        0.900\n",
       "  4.544   1167       1    0.886 0.007057        0.872        0.900\n",
       "  4.613   1158       1    0.885 0.007083        0.872        0.899\n",
       "  4.627   1152       1    0.885 0.007108        0.871        0.899\n",
       "  4.629   1151       1    0.884 0.007134        0.870        0.898\n",
       "  4.642   1150       1    0.884 0.007159        0.870        0.898\n",
       "  4.690   1140       1    0.883 0.007185        0.869        0.898\n",
       "  4.703   1136       1    0.883 0.007210        0.869        0.897\n",
       "  4.711   1133       1    0.882 0.007236        0.868        0.897\n",
       "  4.740   1121       1    0.882 0.007262        0.868        0.896\n",
       "  4.760   1116       1    0.881 0.007288        0.867        0.896\n",
       "  4.838   1096       1    0.881 0.007315        0.866        0.895\n",
       "  4.878   1090       1    0.880 0.007342        0.866        0.895\n",
       "  4.919   1073       1    0.880 0.007369        0.865        0.894\n",
       "  4.944   1064       1    0.879 0.007396        0.865        0.894\n",
       "  4.955   1061       1    0.878 0.007424        0.864        0.893\n",
       "  4.960   1060       1    0.878 0.007451        0.863        0.893\n",
       "  5.001   1050       1    0.877 0.007479        0.863        0.892\n",
       "  5.026   1041       1    0.877 0.007507        0.862        0.892\n",
       "  5.052   1034       1    0.876 0.007535        0.862        0.891\n",
       "  5.203   1014       1    0.876 0.007564        0.861        0.891\n",
       "  5.205   1013       1    0.875 0.007593        0.860        0.890\n",
       "  5.236   1002       1    0.874 0.007623        0.860        0.890\n",
       "  5.295    995       1    0.874 0.007652        0.859        0.889\n",
       "  5.316    992       1    0.873 0.007682        0.858        0.888\n",
       "  5.358    988       1    0.873 0.007712        0.858        0.888\n",
       "  5.448    982       1    0.872 0.007742        0.857        0.887\n",
       "  5.489    975       1    0.872 0.007772        0.856        0.887\n",
       "  5.606    955       1    0.871 0.007802        0.856        0.886\n",
       "  5.701    941       1    0.870 0.007834        0.855        0.886\n",
       "  5.798    927       1    0.870 0.007866        0.854        0.885\n",
       "  5.889    899       1    0.869 0.007900        0.854        0.885\n",
       "  5.905    895       1    0.868 0.007934        0.853        0.884\n",
       "  5.917    892       1    0.868 0.007968        0.852        0.883\n",
       "  5.934    888       1    0.867 0.008002        0.852        0.883\n",
       "  5.958    883       1    0.866 0.008036        0.851        0.882\n",
       "  6.007    872       1    0.866 0.008071        0.850        0.882\n",
       "  6.169    847       1    0.865 0.008107        0.849        0.881\n",
       "  6.170    845       1    0.864 0.008143        0.849        0.881\n",
       "  6.181    844       1    0.864 0.008179        0.848        0.880\n",
       "  6.244    828       1    0.863 0.008217        0.847        0.879\n",
       "  6.269    825       1    0.862 0.008254        0.846        0.879\n",
       "  6.276    823       1    0.862 0.008292        0.846        0.878\n",
       "  6.487    805       1    0.861 0.008331        0.845        0.877\n",
       "  6.508    802       1    0.860 0.008370        0.844        0.877\n",
       "  6.601    791       1    0.859 0.008409        0.843        0.876\n",
       "  6.705    783       1    0.859 0.008449        0.842        0.875\n",
       "  6.753    773       1    0.858 0.008490        0.842        0.875\n",
       "  6.788    768       1    0.857 0.008530        0.841        0.874\n",
       "  6.794    767       1    0.856 0.008571        0.840        0.873\n",
       "  6.798    765       1    0.856 0.008611        0.839        0.873\n",
       "  6.851    758       1    0.855 0.008652        0.838        0.872\n",
       "  6.864    754       1    0.854 0.008693        0.837        0.871\n",
       "  6.893    746       1    0.853 0.008735        0.837        0.871\n",
       "  6.899    743       1    0.853 0.008777        0.836        0.870\n",
       "  6.924    739       1    0.852 0.008818        0.835        0.869\n",
       "  6.978    730       1    0.851 0.008861        0.834        0.869\n",
       "  7.037    716       1    0.850 0.008904        0.833        0.868\n",
       "  7.040    714       1    0.850 0.008947        0.832        0.867\n",
       "  7.041    713       1    0.849 0.008990        0.831        0.867\n",
       "  7.121    703       1    0.848 0.009033        0.830        0.866\n",
       "  7.220    695       1    0.847 0.009078        0.830        0.865\n",
       "  7.233    694       1    0.846 0.009122        0.829        0.864\n",
       "  7.236    693       1    0.846 0.009166        0.828        0.864\n",
       "  7.292    686       1    0.845 0.009210        0.827        0.863\n",
       "  7.309    685       1    0.844 0.009254        0.826        0.862\n",
       "  7.501    667       1    0.843 0.009300        0.825        0.862\n",
       "  7.541    664       1    0.842 0.009346        0.824        0.861\n",
       "  7.569    660       1    0.841 0.009392        0.823        0.860\n",
       "  7.594    658       1    0.841 0.009438        0.822        0.859\n",
       "  7.612    655       1    0.840 0.009484        0.821        0.859\n",
       "  7.638    650       1    0.839 0.009531        0.820        0.858\n",
       "  7.794    633       1    0.838 0.009579        0.819        0.857\n",
       "  7.835    625       1    0.837 0.009629        0.818        0.856\n",
       "  7.906    609       1    0.836 0.009679        0.817        0.855\n",
       "  7.970    601       1    0.835 0.009731        0.816        0.855\n",
       "  8.008    597       1    0.834 0.009783        0.815        0.854\n",
       "  8.167    577       1    0.833 0.009837        0.814        0.853\n",
       "  8.326    559       1    0.832 0.009894        0.813        0.852\n",
       "  8.342    558       1    0.831 0.009950        0.812        0.851\n",
       "  8.403    554       1    0.830 0.010007        0.811        0.850\n",
       "  8.461    551       1    0.829 0.010065        0.810        0.849\n",
       "  8.569    544       1    0.828 0.010123        0.809        0.849\n",
       "  8.587    542       1    0.827 0.010181        0.808        0.848\n",
       "  8.657    538       1    0.826 0.010240        0.807        0.847\n",
       "  8.706    531       1    0.825 0.010299        0.806        0.846\n",
       "  8.760    524       1    0.824 0.010360        0.804        0.845\n",
       "  8.782    523       1    0.823 0.010421        0.803        0.844\n",
       "  8.788    521       1    0.822 0.010481        0.802        0.843\n",
       "  8.799    519       1    0.821 0.010542        0.801        0.842\n",
       "  8.819    516       1    0.820 0.010602        0.800        0.841\n",
       "  8.892    511       1    0.819 0.010663        0.799        0.840\n",
       "  8.917    510       1    0.818 0.010723        0.797        0.839\n",
       "  8.972    504       1    0.817 0.010785        0.796        0.838\n",
       "  8.985    502       1    0.816 0.010846        0.795        0.838\n",
       "  9.131    496       1    0.815 0.010907        0.794        0.837\n",
       "  9.155    492       1    0.814 0.010969        0.793        0.836\n",
       "  9.253    487       1    0.813 0.011031        0.791        0.835\n",
       "  9.274    485       1    0.812 0.011093        0.790        0.834\n",
       "  9.483    474       1    0.811 0.011159        0.789        0.833\n",
       "  9.604    467       1    0.809 0.011226        0.788        0.832\n",
       "  9.758    452       1    0.808 0.011297        0.786        0.831\n",
       "  9.774    449       1    0.807 0.011367        0.785        0.830\n",
       "  9.806    444       1    0.806 0.011439        0.784        0.829\n",
       "  9.887    439       1    0.805 0.011510        0.782        0.828\n",
       " 10.004    429       1    0.803 0.011583        0.781        0.826\n",
       " 10.049    427       1    0.802 0.011656        0.780        0.825\n",
       " 10.106    424       1    0.801 0.011729        0.778        0.824\n",
       " 10.127    423       1    0.800 0.011802        0.777        0.823\n",
       " 10.138    422       1    0.798 0.011874        0.776        0.822\n",
       " 10.399    410       1    0.797 0.011949        0.774        0.821\n",
       " 10.475    405       1    0.796 0.012024        0.773        0.820\n",
       " 10.738    388       1    0.795 0.012104        0.771        0.819\n",
       " 10.810    384       1    0.793 0.012184        0.770        0.818\n",
       " 10.825    382       1    0.792 0.012264        0.768        0.816\n",
       " 11.119    368       1    0.791 0.012350        0.767        0.815\n",
       " 11.132    366       1    0.789 0.012437        0.765        0.814\n",
       " 11.178    365       1    0.788 0.012524        0.764        0.813\n",
       " 11.355    357       1    0.786 0.012612        0.762        0.812\n",
       " 11.521    353       1    0.785 0.012701        0.760        0.810\n",
       " 11.542    352       1    0.784 0.012790        0.759        0.809\n",
       " 11.566    351       1    0.782 0.012878        0.757        0.808\n",
       " 11.764    339       1    0.781 0.012971        0.756        0.806\n",
       " 11.772    337       1    0.779 0.013065        0.754        0.805\n",
       " 11.784    335       1    0.778 0.013158        0.752        0.804\n",
       " 11.785    334       1    0.776 0.013251        0.751        0.803\n",
       " 11.934    326       1    0.775 0.013349        0.749        0.801\n",
       " 11.988    323       1    0.773 0.013446        0.747        0.800\n",
       " 12.046    317       1    0.771 0.013546        0.745        0.798\n",
       " 12.097    313       1    0.770 0.013645        0.744        0.797\n",
       " 12.697    290       1    0.768 0.013759        0.742        0.796\n",
       " 12.815    284       1    0.766 0.013877        0.740        0.794\n",
       " 12.994    276       1    0.764 0.014001        0.738        0.792\n",
       " 13.307    263       1    0.763 0.014132        0.735        0.791\n",
       " 13.825    243       1    0.761 0.014283        0.733        0.789\n",
       " 13.905    239       1    0.759 0.014434        0.731        0.787\n",
       " 13.912    238       1    0.756 0.014583        0.728        0.786\n",
       " 14.195    227       1    0.754 0.014744        0.726        0.784\n",
       " 14.300    225       1    0.752 0.014913        0.723        0.782\n",
       " 14.337    223       1    0.750 0.015082        0.721        0.780\n",
       " 14.376    221       1    0.748 0.015250        0.718        0.778\n",
       " 14.767    211       1    0.745 0.015428        0.716        0.776\n",
       " 14.781    210       1    0.743 0.015604        0.713        0.774\n",
       " 15.140    203       1    0.741 0.015787        0.710        0.772\n",
       " 15.266    201       1    0.738 0.015970        0.708        0.770\n",
       " 15.414    199       1    0.736 0.016152        0.705        0.768\n",
       " 16.260    177       1    0.733 0.016369        0.702        0.766\n",
       " 17.206    157       1    0.730 0.016628        0.698        0.763\n",
       " 17.413    154       1    0.727 0.016888        0.695        0.761\n",
       " 17.854    141       1    0.724 0.017203        0.691        0.758\n",
       " 18.335    135       1    0.720 0.017542        0.687        0.756\n",
       " 18.449    134       1    0.717 0.017871        0.683        0.753\n",
       " 18.664    127       1    0.713 0.018233        0.678        0.750\n",
       " 18.707    125       1    0.709 0.018592        0.674        0.747\n",
       " 19.119    118       1    0.706 0.018964        0.669        0.744\n",
       " 19.846    106       1    0.701 0.019390        0.664        0.740\n",
       " 20.081    100       1    0.697 0.019830        0.659        0.737\n",
       " 20.119     99       1    0.693 0.020264        0.654        0.734\n",
       " 20.198     98       1    0.689 0.020682        0.649        0.730\n",
       " 20.646     94       1    0.684 0.021115        0.644        0.727\n",
       " 20.684     93       1    0.680 0.021535        0.639        0.723\n",
       " 20.778     92       1    0.675 0.021945        0.634        0.720\n",
       " 20.975     88       1    0.671 0.022354        0.628        0.716\n",
       " 21.290     85       1    0.666 0.022760        0.623        0.712\n",
       " 21.353     84       1    0.662 0.023155        0.618        0.709\n",
       " 22.038     71       1    0.657 0.023632        0.612        0.705\n",
       " 22.937     66       1    0.651 0.024149        0.606        0.700\n",
       " 25.991     44       1    0.643 0.025426        0.595        0.695\n",
       " 27.052     39       1    0.634 0.026870        0.583        0.689\n",
       " 27.728     33       1    0.623 0.028585        0.570        0.682\n",
       " 28.740     28       1    0.610 0.031119        0.552        0.674\n",
       " 32.987     17       1    0.588 0.037340        0.519        0.666\n",
       " 33.460     15       1    0.565 0.042677        0.487        0.655"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "summary(surv_central)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Call:\n",
       "coxph(formula = Surv(time, Y) ~ x1 + x2 + x3 + x4 + x5 + x6 + \n",
       "    x7 + x8, data = central, ties = \"breslow\")\n",
       "\n",
       "        coef exp(coef)  se(coef)       z        p\n",
       "x1  0.015121  1.015236  0.002969   5.093 3.52e-07\n",
       "x2 -0.090159  0.913786  0.011202  -8.048 8.39e-16\n",
       "x3 -0.146756  0.863505  0.024878  -5.899 3.66e-09\n",
       "x4 -4.274761  0.013915  0.385733 -11.082  < 2e-16\n",
       "x5 -0.021926  0.978313  0.004215  -5.202 1.97e-07\n",
       "x6  0.006145  1.006164  0.001653   3.717 0.000202\n",
       "x7  0.027441  1.027821  0.007894   3.476 0.000508\n",
       "x8  0.008739  1.008778  0.001819   4.805 1.55e-06\n",
       "\n",
       "Likelihood ratio test=458.7  on 8 df, p=< 2.2e-16\n",
       "n= 2910, number of events= 541 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "central_fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "0.00989696367526644"
      ],
      "text/latex": [
       "0.00989696367526644"
      ],
      "text/markdown": [
       "0.00989696367526644"
      ],
      "text/plain": [
       "[1] 0.009896964"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "0.000125484804"
      ],
      "text/latex": [
       "0.000125484804"
      ],
      "text/markdown": [
       "0.000125484804"
      ],
      "text/plain": [
       "[1] 0.0001254848"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sqrt(var(loss_WIM_para_VAR[,2]))\n",
    "0.011202*0.011202"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 8 × 8 of type dbl</caption>\n",
       "<tbody>\n",
       "\t<tr><td> 7.749898e-06</td><td>-1.771658e-06</td><td>-9.192669e-06</td><td>-1.762584e-04</td><td> 1.067780e-06</td><td>-1.153376e-06</td><td> 4.106501e-06</td><td> 8.267625e-08</td></tr>\n",
       "\t<tr><td>-1.771658e-06</td><td> 9.794989e-05</td><td>-2.646069e-05</td><td> 8.941453e-06</td><td>-4.750396e-06</td><td>-7.672883e-07</td><td>-7.857442e-06</td><td> 3.032005e-06</td></tr>\n",
       "\t<tr><td>-9.192669e-06</td><td>-2.646069e-05</td><td> 7.927189e-04</td><td>-1.140011e-03</td><td>-2.182460e-05</td><td> 1.794897e-06</td><td>-1.238805e-05</td><td>-2.702767e-06</td></tr>\n",
       "\t<tr><td>-1.762584e-04</td><td> 8.941453e-06</td><td>-1.140011e-03</td><td> 1.125031e-01</td><td>-5.374137e-06</td><td> 1.130561e-04</td><td>-1.537557e-05</td><td> 1.768365e-04</td></tr>\n",
       "\t<tr><td> 1.067780e-06</td><td>-4.750396e-06</td><td>-2.182460e-05</td><td>-5.374137e-06</td><td> 1.557847e-05</td><td> 1.222890e-07</td><td> 7.981997e-06</td><td>-1.203870e-06</td></tr>\n",
       "\t<tr><td>-1.153376e-06</td><td>-7.672883e-07</td><td> 1.794897e-06</td><td> 1.130561e-04</td><td> 1.222890e-07</td><td> 2.226602e-06</td><td>-3.073630e-06</td><td> 3.366008e-07</td></tr>\n",
       "\t<tr><td> 4.106501e-06</td><td>-7.857442e-06</td><td>-1.238805e-05</td><td>-1.537557e-05</td><td> 7.981997e-06</td><td>-3.073630e-06</td><td> 7.031972e-05</td><td> 8.162639e-07</td></tr>\n",
       "\t<tr><td> 8.267625e-08</td><td> 3.032005e-06</td><td>-2.702767e-06</td><td> 1.768365e-04</td><td>-1.203870e-06</td><td> 3.366008e-07</td><td> 8.162639e-07</td><td> 2.258324e-06</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 8 × 8 of type dbl\n",
       "\\begin{tabular}{llllllll}\n",
       "\t  7.749898e-06 & -1.771658e-06 & -9.192669e-06 & -1.762584e-04 &  1.067780e-06 & -1.153376e-06 &  4.106501e-06 &  8.267625e-08\\\\\n",
       "\t -1.771658e-06 &  9.794989e-05 & -2.646069e-05 &  8.941453e-06 & -4.750396e-06 & -7.672883e-07 & -7.857442e-06 &  3.032005e-06\\\\\n",
       "\t -9.192669e-06 & -2.646069e-05 &  7.927189e-04 & -1.140011e-03 & -2.182460e-05 &  1.794897e-06 & -1.238805e-05 & -2.702767e-06\\\\\n",
       "\t -1.762584e-04 &  8.941453e-06 & -1.140011e-03 &  1.125031e-01 & -5.374137e-06 &  1.130561e-04 & -1.537557e-05 &  1.768365e-04\\\\\n",
       "\t  1.067780e-06 & -4.750396e-06 & -2.182460e-05 & -5.374137e-06 &  1.557847e-05 &  1.222890e-07 &  7.981997e-06 & -1.203870e-06\\\\\n",
       "\t -1.153376e-06 & -7.672883e-07 &  1.794897e-06 &  1.130561e-04 &  1.222890e-07 &  2.226602e-06 & -3.073630e-06 &  3.366008e-07\\\\\n",
       "\t  4.106501e-06 & -7.857442e-06 & -1.238805e-05 & -1.537557e-05 &  7.981997e-06 & -3.073630e-06 &  7.031972e-05 &  8.162639e-07\\\\\n",
       "\t  8.267625e-08 &  3.032005e-06 & -2.702767e-06 &  1.768365e-04 & -1.203870e-06 &  3.366008e-07 &  8.162639e-07 &  2.258324e-06\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 8 × 8 of type dbl\n",
       "\n",
       "|  7.749898e-06 | -1.771658e-06 | -9.192669e-06 | -1.762584e-04 |  1.067780e-06 | -1.153376e-06 |  4.106501e-06 |  8.267625e-08 |\n",
       "| -1.771658e-06 |  9.794989e-05 | -2.646069e-05 |  8.941453e-06 | -4.750396e-06 | -7.672883e-07 | -7.857442e-06 |  3.032005e-06 |\n",
       "| -9.192669e-06 | -2.646069e-05 |  7.927189e-04 | -1.140011e-03 | -2.182460e-05 |  1.794897e-06 | -1.238805e-05 | -2.702767e-06 |\n",
       "| -1.762584e-04 |  8.941453e-06 | -1.140011e-03 |  1.125031e-01 | -5.374137e-06 |  1.130561e-04 | -1.537557e-05 |  1.768365e-04 |\n",
       "|  1.067780e-06 | -4.750396e-06 | -2.182460e-05 | -5.374137e-06 |  1.557847e-05 |  1.222890e-07 |  7.981997e-06 | -1.203870e-06 |\n",
       "| -1.153376e-06 | -7.672883e-07 |  1.794897e-06 |  1.130561e-04 |  1.222890e-07 |  2.226602e-06 | -3.073630e-06 |  3.366008e-07 |\n",
       "|  4.106501e-06 | -7.857442e-06 | -1.238805e-05 | -1.537557e-05 |  7.981997e-06 | -3.073630e-06 |  7.031972e-05 |  8.162639e-07 |\n",
       "|  8.267625e-08 |  3.032005e-06 | -2.702767e-06 |  1.768365e-04 | -1.203870e-06 |  3.366008e-07 |  8.162639e-07 |  2.258324e-06 |\n",
       "\n"
      ],
      "text/plain": [
       "     [,1]          [,2]          [,3]          [,4]          [,5]         \n",
       "[1,]  7.749898e-06 -1.771658e-06 -9.192669e-06 -1.762584e-04  1.067780e-06\n",
       "[2,] -1.771658e-06  9.794989e-05 -2.646069e-05  8.941453e-06 -4.750396e-06\n",
       "[3,] -9.192669e-06 -2.646069e-05  7.927189e-04 -1.140011e-03 -2.182460e-05\n",
       "[4,] -1.762584e-04  8.941453e-06 -1.140011e-03  1.125031e-01 -5.374137e-06\n",
       "[5,]  1.067780e-06 -4.750396e-06 -2.182460e-05 -5.374137e-06  1.557847e-05\n",
       "[6,] -1.153376e-06 -7.672883e-07  1.794897e-06  1.130561e-04  1.222890e-07\n",
       "[7,]  4.106501e-06 -7.857442e-06 -1.238805e-05 -1.537557e-05  7.981997e-06\n",
       "[8,]  8.267625e-08  3.032005e-06 -2.702767e-06  1.768365e-04 -1.203870e-06\n",
       "     [,6]          [,7]          [,8]         \n",
       "[1,] -1.153376e-06  4.106501e-06  8.267625e-08\n",
       "[2,] -7.672883e-07 -7.857442e-06  3.032005e-06\n",
       "[3,]  1.794897e-06 -1.238805e-05 -2.702767e-06\n",
       "[4,]  1.130561e-04 -1.537557e-05  1.768365e-04\n",
       "[5,]  1.222890e-07  7.981997e-06 -1.203870e-06\n",
       "[6,]  2.226602e-06 -3.073630e-06  3.366008e-07\n",
       "[7,] -3.073630e-06  7.031972e-05  8.162639e-07\n",
       "[8,]  3.366008e-07  8.162639e-07  2.258324e-06"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "2.73968074139922e-05"
      ],
      "text/latex": [
       "2.73968074139922e-05"
      ],
      "text/markdown": [
       "2.73968074139922e-05"
      ],
      "text/plain": [
       "[1] 2.739681e-05"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cov(loss_WIM_para_VAR)\n",
    "cov(sort(loss_WIM_para_VAR[,1]),sort(loss_WIM_para_VAR[,2]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "<caption>A matrix: 8 × 8 of type dbl</caption>\n",
       "<thead>\n",
       "\t<tr><th></th><th scope=col>x1</th><th scope=col>x2</th><th scope=col>x3</th><th scope=col>x4</th><th scope=col>x5</th><th scope=col>x6</th><th scope=col>x7</th><th scope=col>x8</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><th scope=row>x1</th><td> 8.814888e-06</td><td>-3.449904e-06</td><td> 6.377339e-06</td><td>-0.0001176645</td><td>-6.532754e-07</td><td>-1.060609e-06</td><td> 5.256044e-06</td><td>-1.694268e-07</td></tr>\n",
       "\t<tr><th scope=row>x2</th><td>-3.449904e-06</td><td> 1.254864e-04</td><td>-4.857639e-05</td><td>-0.0002233723</td><td>-9.239396e-07</td><td>-1.063909e-06</td><td>-6.703078e-08</td><td> 3.546922e-06</td></tr>\n",
       "\t<tr><th scope=row>x3</th><td> 6.377339e-06</td><td>-4.857639e-05</td><td> 6.189212e-04</td><td>-0.0023727562</td><td>-1.342195e-05</td><td>-2.218907e-06</td><td>-2.678845e-06</td><td> 1.719164e-06</td></tr>\n",
       "\t<tr><th scope=row>x4</th><td>-1.176645e-04</td><td>-2.233723e-04</td><td>-2.372756e-03</td><td> 0.1487896003</td><td> 4.677273e-04</td><td> 1.262261e-04</td><td> 7.426730e-05</td><td> 1.801261e-04</td></tr>\n",
       "\t<tr><th scope=row>x5</th><td>-6.532754e-07</td><td>-9.239396e-07</td><td>-1.342195e-05</td><td> 0.0004677273</td><td> 1.776531e-05</td><td> 3.069565e-07</td><td> 2.480838e-06</td><td>-1.168392e-06</td></tr>\n",
       "\t<tr><th scope=row>x6</th><td>-1.060609e-06</td><td>-1.063909e-06</td><td>-2.218907e-06</td><td> 0.0001262261</td><td> 3.069565e-07</td><td> 2.733699e-06</td><td>-2.574805e-06</td><td> 3.119906e-07</td></tr>\n",
       "\t<tr><th scope=row>x7</th><td> 5.256044e-06</td><td>-6.703078e-08</td><td>-2.678845e-06</td><td> 0.0000742673</td><td> 2.480838e-06</td><td>-2.574805e-06</td><td> 6.230840e-05</td><td>-8.181275e-07</td></tr>\n",
       "\t<tr><th scope=row>x8</th><td>-1.694268e-07</td><td> 3.546922e-06</td><td> 1.719164e-06</td><td> 0.0001801261</td><td>-1.168392e-06</td><td> 3.119906e-07</td><td>-8.181275e-07</td><td> 3.308266e-06</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A matrix: 8 × 8 of type dbl\n",
       "\\begin{tabular}{r|llllllll}\n",
       "  & x1 & x2 & x3 & x4 & x5 & x6 & x7 & x8\\\\\n",
       "\\hline\n",
       "\tx1 &  8.814888e-06 & -3.449904e-06 &  6.377339e-06 & -0.0001176645 & -6.532754e-07 & -1.060609e-06 &  5.256044e-06 & -1.694268e-07\\\\\n",
       "\tx2 & -3.449904e-06 &  1.254864e-04 & -4.857639e-05 & -0.0002233723 & -9.239396e-07 & -1.063909e-06 & -6.703078e-08 &  3.546922e-06\\\\\n",
       "\tx3 &  6.377339e-06 & -4.857639e-05 &  6.189212e-04 & -0.0023727562 & -1.342195e-05 & -2.218907e-06 & -2.678845e-06 &  1.719164e-06\\\\\n",
       "\tx4 & -1.176645e-04 & -2.233723e-04 & -2.372756e-03 &  0.1487896003 &  4.677273e-04 &  1.262261e-04 &  7.426730e-05 &  1.801261e-04\\\\\n",
       "\tx5 & -6.532754e-07 & -9.239396e-07 & -1.342195e-05 &  0.0004677273 &  1.776531e-05 &  3.069565e-07 &  2.480838e-06 & -1.168392e-06\\\\\n",
       "\tx6 & -1.060609e-06 & -1.063909e-06 & -2.218907e-06 &  0.0001262261 &  3.069565e-07 &  2.733699e-06 & -2.574805e-06 &  3.119906e-07\\\\\n",
       "\tx7 &  5.256044e-06 & -6.703078e-08 & -2.678845e-06 &  0.0000742673 &  2.480838e-06 & -2.574805e-06 &  6.230840e-05 & -8.181275e-07\\\\\n",
       "\tx8 & -1.694268e-07 &  3.546922e-06 &  1.719164e-06 &  0.0001801261 & -1.168392e-06 &  3.119906e-07 & -8.181275e-07 &  3.308266e-06\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A matrix: 8 × 8 of type dbl\n",
       "\n",
       "| <!--/--> | x1 | x2 | x3 | x4 | x5 | x6 | x7 | x8 |\n",
       "|---|---|---|---|---|---|---|---|---|\n",
       "| x1 |  8.814888e-06 | -3.449904e-06 |  6.377339e-06 | -0.0001176645 | -6.532754e-07 | -1.060609e-06 |  5.256044e-06 | -1.694268e-07 |\n",
       "| x2 | -3.449904e-06 |  1.254864e-04 | -4.857639e-05 | -0.0002233723 | -9.239396e-07 | -1.063909e-06 | -6.703078e-08 |  3.546922e-06 |\n",
       "| x3 |  6.377339e-06 | -4.857639e-05 |  6.189212e-04 | -0.0023727562 | -1.342195e-05 | -2.218907e-06 | -2.678845e-06 |  1.719164e-06 |\n",
       "| x4 | -1.176645e-04 | -2.233723e-04 | -2.372756e-03 |  0.1487896003 |  4.677273e-04 |  1.262261e-04 |  7.426730e-05 |  1.801261e-04 |\n",
       "| x5 | -6.532754e-07 | -9.239396e-07 | -1.342195e-05 |  0.0004677273 |  1.776531e-05 |  3.069565e-07 |  2.480838e-06 | -1.168392e-06 |\n",
       "| x6 | -1.060609e-06 | -1.063909e-06 | -2.218907e-06 |  0.0001262261 |  3.069565e-07 |  2.733699e-06 | -2.574805e-06 |  3.119906e-07 |\n",
       "| x7 |  5.256044e-06 | -6.703078e-08 | -2.678845e-06 |  0.0000742673 |  2.480838e-06 | -2.574805e-06 |  6.230840e-05 | -8.181275e-07 |\n",
       "| x8 | -1.694268e-07 |  3.546922e-06 |  1.719164e-06 |  0.0001801261 | -1.168392e-06 |  3.119906e-07 | -8.181275e-07 |  3.308266e-06 |\n",
       "\n"
      ],
      "text/plain": [
       "   x1            x2            x3            x4            x5           \n",
       "x1  8.814888e-06 -3.449904e-06  6.377339e-06 -0.0001176645 -6.532754e-07\n",
       "x2 -3.449904e-06  1.254864e-04 -4.857639e-05 -0.0002233723 -9.239396e-07\n",
       "x3  6.377339e-06 -4.857639e-05  6.189212e-04 -0.0023727562 -1.342195e-05\n",
       "x4 -1.176645e-04 -2.233723e-04 -2.372756e-03  0.1487896003  4.677273e-04\n",
       "x5 -6.532754e-07 -9.239396e-07 -1.342195e-05  0.0004677273  1.776531e-05\n",
       "x6 -1.060609e-06 -1.063909e-06 -2.218907e-06  0.0001262261  3.069565e-07\n",
       "x7  5.256044e-06 -6.703078e-08 -2.678845e-06  0.0000742673  2.480838e-06\n",
       "x8 -1.694268e-07  3.546922e-06  1.719164e-06  0.0001801261 -1.168392e-06\n",
       "   x6            x7            x8           \n",
       "x1 -1.060609e-06  5.256044e-06 -1.694268e-07\n",
       "x2 -1.063909e-06 -6.703078e-08  3.546922e-06\n",
       "x3 -2.218907e-06 -2.678845e-06  1.719164e-06\n",
       "x4  1.262261e-04  7.426730e-05  1.801261e-04\n",
       "x5  3.069565e-07  2.480838e-06 -1.168392e-06\n",
       "x6  2.733699e-06 -2.574805e-06  3.119906e-07\n",
       "x7 -2.574805e-06  6.230840e-05 -8.181275e-07\n",
       "x8  3.119906e-07 -8.181275e-07  3.308266e-06"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "vcov(central_fit)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "-2.33333333333333"
      ],
      "text/latex": [
       "-2.33333333333333"
      ],
      "text/markdown": [
       "-2.33333333333333"
      ],
      "text/plain": [
       "[1] -2.333333"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cov(c(1,0,3), c(4,10,6))-++"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "4.66666666666667"
      ],
      "text/latex": [
       "4.66666666666667"
      ],
      "text/markdown": [
       "4.66666666666667"
      ],
      "text/plain": [
       "[1] 4.666667"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cov(c(0,3,1), c(4,10,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "3.6.0"
  },
  "metadata": {
   "interpreter": {
    "hash": "527be88bcd8167c1a53dde1fc0fe17d58dfa7e10c495ecaf8fc1b037210b330e"
   }
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "213.366px"
   },
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
